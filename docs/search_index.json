[["index.html", "Portfolio Chapter 1 Introduction. CV", " Portfolio alena savachenko 2024-12-30 Chapter 1 Introduction. CV This is a Markdown document created as an introduction to a data science portfolio. CV Alena Savachenko Email: asava3**@gmail.com Phone: 06161781** Bitrix Developer I am a Bitrix developer with more than 3 years of experience with Bitrix, Wordpress, and Php. I'm motivated, result-focused and seeking a successful team-oriented company with opportunity to grow. Experience Grantmarketing https://www.grantmarketing.ru sales@grantmarketing.ru Jan 2019 - 2024 Bitrix developer marketing, content and design support for Bitrix based selling platform Education Biology and Medical Laboratory Research Netherlans, Utrecht Sep 2022 - until now Projects Genome annotation ab de novo Lumbricus Terrestris genome annotation https://github.com/ProjecticumDataScience/lumbricus Project Java application Jira integrated Java Dashboard https://github.com/alenaSavachenko/dashboardApplicationOnSpringBoot Project Wordpress application https://github.com/alenaSavachenko/arena.km.ua-wp-thema Project Bitrix application selling site, building panels Altek https://github.com/alenagrrr3/gravis-composit Skills R & Biopython PHP CSS HTML GIT Languages English, German. "],["genome-annotatie-ab-de-novo.html", "Chapter 2 Genome annotatie ab de novo.Inleiding", " Chapter 2 Genome annotatie ab de novo.Inleiding Dit onderwerp van onderzoek is heel belangrijk, omdat er in de experimentele wetenschap momenteel gezocht wordt naar alternatieven voor het gebruik van dieren in verschillende laboratoriumexperimenten. Aangezien verschillende wormsoorten een belangrijke rol spelen als modellen in medisch en biologisch onderzoek, is het cruciaal om hun genetisch materiaal te onderzoeken. Dit project richt zich specifiek op de analyse van het genoom van de soort Lumbricida.De soort Lumbricus Terresteris hoort tot de fylogenetische familie Annelida, Clitellata, Oligochaeta, Crassiclitellata, Lumbricina, Lumbricidae (Erxleben &amp; Grüning, 12:19:56 +0000). De soort ringwormen (Annelida) zijn de oudste evolutionaire groep. De musculatuur lijkt hier sterk op de dwarsgestreptte musculatuur van dieren.(Pilato, n.d.). Daarom is deze soort een van de mensrelevante modellen voor laboratoriumonderzoek. Genoomannotatie is het proces dat gericht is op het identificeren van functionele componenten binnen een DNA-sequentie. Dit proces van annotatie biedt inzicht in het genoom door de plaats en functie van genen te specificeren, waaronder genen die eiwitten coderen of andere functies vervullen, evenals de bijbehorende regulerende elementen. De assemblage is altijd gebaseerd op de reads die zijn gegenereerd tijdens het sequentieproces. Het proces van genoomassemblage houdt in dat het originele genoom wordt gereconstrueerd uit kleine stukjes DNA, verkregen door middel van sequenting(NovoAssemblyTutorial?). Deze reads zorgen ervoor dat het oorspronkelijke genoom meestal meerdere keren wordt gedekt. Bij het analyseren van genomische en metagenomische gegevens, is de gebruikelijke oplossing een verzameling contigs. Een contig is een aaneengeschakelde nucleotidesequentie. Deze contigs kunnen worden samengevoegd tot scaffolds, waarbij scaffolds bestaan uit een reeks contigs met een schatting van de afstanden tussen deze sequenties(NCBIEukaryoticGenome?) processen van genomassemblage en annotatie zijn geïntegreerd in een groter geheel dat zich richt op de identificatie van het genoom. Het annoteren van genoom is nog steeds een proces dat veel tijd kost en verschillende soorten sequentieanalyses samenbrengt. Gezien de grootte en complexiteit van genomen, is de eerste stap naar volledige genoomassemblage meestal het verkrijgen van sequencinggegevens om ruwe assemblage en voorspelling van genmodellen te verkrijgen. Het hele annotatieproces bestaat over het algemeen uit de volgende stappen : 1) Het maskeren van sterk repetitieve elementen in de genoomsequentie 2) het gebruik van transcripten en eiwitten van dezelfde of verwante soorten om ab initio te voorspellen . De bekende transcripten en eiwitten zijn opgeslagen in genetische databases zoals NCBI en BLAST. 3) gebruik van genzoekalgoritmen om mogelijke genstructuren te identificeren; 4) het combineren van deze gegevens om een eerste reeks genmodellen te creëren; 5) filteren van de resultaten op kwaliteit om de meest waarschijnlijke genmodellen te identificeren die volledige eiwitcoderende regio’s.(ncbi.nlm.nih.gov, n.d.) . In eerste instantie wordt de kwaliteitsselectie uitgevoerd met behulp van een set positieve controles voor het programma. Na het voltooien van deze controles wordt het percentage fout-positieven resuultaten duidelijk zichtbaar. Een overzicht van publiek beschikbare genomen en annotaties in de soort Lumbricus terrestris. Hoewel er in de bestaande literatuur slechts een beperkt aantal studies is dat de assemblage en annotatie van het genoom van Lumbricus terrestris behandelt, zijn er wel talrijke beschrijvingen van de genoomannotatie van andere organismen. Voor de soorten C.Elegans en Lubricus Rubellis is er bijvoorbeeld een volledige annotatie. Voor het eerst wordt een gedetailleerde genoomassemblage van de genen van een soort Lumbricus terrestris gepubliceerd op 30 oktober (Blaxter et al., 2023). Door de innovatieve long-read sequencing methoden van Pacific Biosciences hebben de wetenschappers het genoom gesequenced en gepubliceerd. Hoewel het gepubliceerde genoom compleet is op sequentieniveau, is de analyse van de annotaties erg fragmentarisch. Deze genoomassemblage is de eerste die voor het publiek beschikbaar is. Het project legt de focus op het verder onderzoeken van de metadata van genoomassemblages. Tot nu toe zijn er in de literatuur geen uitgebreide en systematische studies gedaan over de annotatie van het Lumbricus terrestris genoom. "],["samenvatting.html", "Chapter 3 Samenvatting 3.1 1.Training van het AUGUSTUS-programma voor het ontdekken van nieuwe genmodellen en hun patronen. 3.2 2.. De training van het AUGUSTUS-programma met proteïne van langere evolutionaire afstand", " Chapter 3 Samenvatting 3.1 1.Training van het AUGUSTUS-programma voor het ontdekken van nieuwe genmodellen en hun patronen. De training van AUGUSTUS vond plaats in verschillende stappen. In het begin werd de predictor uitgevoerd met de standaardinstellingen voor caenorhabditis, wat leidde tot 11.000 voorlopige genmodellen voor één chromosoom, maar met een vrij lage nauwkeurigheid in de voorspellingen. Voor het opstellen van een eerste trainingsset van genen werden RNA-sequencingdata gebruikt. De transcriptomereads werden met TopHat op het genoom gemapt (zie documentatie protocol1, data_processing). Dit resulteerde in 9.953 voorspelde genmodellen per chromosoom op basis van het transcriptoom. Gemiddeld waren de genen ongeveer 5.146 baseparen lang, en elk gen had meestal rond de 3,2 exons (zie protocol1, data_processing, genemarkES, genemark.average_gene_length.out). De exons waren gemiddeld 1.719 baseparen, terwijl de introns gemiddeld 4.760 baseparen lang waren. Daarna werden de genensets gefilterd met het Augustus-programma filterGenemark.pl. Na de filtratie bleven er 1.975 genen over op één chromosoom. Etrain werd uitgevoerd met genen die uit het transcriptoom kwamen. De uiteindelijke parameters werden gebruikt om de gff-annotatie te genereren. Een de novo-model met hoge specificiteit en sensitiviteitsscores van 8-9 voor de Lumbricus Terresstris werd verkregen via de mRna-pijplijn. 3.2 2.. De training van het AUGUSTUS-programma met proteïne van langere evolutionaire afstand Het AUGUSTUS-programma is getraind met proteïne die een langere evolutionaire afstand hebben. Hiervoor is een database uit Ortho DB, Arthropoda (BioinformaticsWebServer?) gebruikt. Deze database is voorbereid met “ProtHints”, wat een onderdeel is van de Braker-pipline(GaiusAugustusBRAKER2024a?). Voor de BLAST-analyse werd de versie ncbi-blast-2.16.0+ toegepast (zie protocol 2 documentatie). De OrthoDB-database diende als referentie. Om redundantie te verminderen, zijn alle trainingsgen aminozuursequenties met elkaar vergeleken en zijn alleen die eiwitsequenties behouden die minder dan 80% redundant zijn met andere sequenties in de set (zie protocol 2, scripts en documenten). Hieruit is een model (species) afgeleid dat de annotatie heeft opgeleverd. Na het verwijderen van redundante genstructuren in de proteïne-pijplijn, zijn de specificiteit en gevoeligheid gestegen van 0,01 naar 0,4-0,5 punten voor het de novo-model van de eiwitpijplijn. "],["alignment.-ruwe-gegevens-inspecteren.html", "Chapter 4 Alignment. Ruwe gegevens inspecteren 4.1 GenemarkET. Model opbouwen (protocol 1). mRna pijplijnne 4.2 Deel 1. Model opbouwen 4.3 Etrain (protocol7) 4.4 ProtHints en de eiwitpijplijn 4.5 ProtHints 4.6 Protocol 2. Het creëren van genstructuren voor training op basis van eiwitten. 4.7 GenomeThreader 4.8 Protocol 6.Verwijderen van Redundant Genstructuren (protocol 6) 4.9 Trainingsset van Proteins.Etrain 4.10 Prediction met behulp van extrinsiek bewijs (Protocol 11-12) 4.11 Identificatie en visualisatie 4.12 Gen-identificatie 4.13 Visualisatie 4.14 GenViz 4.15 JBrowse 4.16 Artemis 4.17 Bijlage 4.18 References", " Chapter 4 Alignment. Ruwe gegevens inspecteren Voor de Alignment zijn Bowtie en Tophat gebruikt. Het transcriptome ID49 is afkomstig van Project: PRJEB59399(ENABrowser?), dat een verzameling genomische en transcriptomische data bevat voor Lumbricus terrestris, ook wel de gewone regenworm genoemd. Dit project is opgezet om de assemblage en annotatie van het genoom te ondersteunen. Je kunt de ruwe gegevens hier bekijken: https://www.ebi.ac.uk/ena/browser/view/PRJEB59399. Reference genoom: https://ftp.ensembl.org/pub/rapid-release/species/Lumbricus_terrestris/GCA_949752735.1/ensembl/genome/ Eerst wordt de index opgebouwd met bowtie2. Daarna vindt de Alignmenet plaats met Tophat. Cufflinks voegt alle reads samen tot transcripties met: cufflinks accepted_hits.bam. bowtie2-build -f Lumbricus_terrestris-GCA_949752735.1-softmasked.fa lumter --large-index tophat lumter sample_1.fastq sample_2.fastq \\ --output-dir TopHAT \\ cufflinks accepted_hits.bam Cufflink zal transcripts.gtf genereren, terwijl TopHat accepted_hits.bam aanmaakt met de resultaten van de uitlijning en een lijst van uitlijningen in jucntions.bed. Elke junction bestaat uit twee verbonden BED-blokken, waarbij elk blok zo lang is als de maximale overhang van een lees die de junction overspant. De score is het aantal uitlijningen dat de junction overspant. Het uitvoerbestand introns.gff bevat informatie over de strengen die gebruikt kan worden voor ET-training. OX457036.1 TopHat2 intron 253060 254504 12 + . . Ten eerste moeten we de ruwe gegevens bekijken die we hebben van de genoom-Alignment . Elke junction bestaat uit twee verbonden BED-blokken, waarbij elk blok zo lang is als de maximale overhang van een lees die de junction overspant. De score is het aantal uitlijningen dat de junction overspant. Junctions.bed (TopHat, protocol1, script2): head(junctions) ## V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 ## 1 OX457036.1 135689 136300 JUNC00000001 16 - 135689 136300 255,0,0 2 143,22 ## 2 OX457036.1 136278 139661 JUNC00000002 13 - 136278 139661 255,0,0 2 22,37 ## 3 OX457036.1 139624 150988 JUNC00000003 9 - 139624 150988 255,0,0 2 37,70 ## 4 OX457036.1 150918 153142 JUNC00000004 1 - 150918 153142 255,0,0 2 70,16 ## 5 OX457036.1 150929 156647 JUNC00000005 1 - 150929 156647 255,0,0 2 59,92 ## 6 OX457036.1 155453 155919 JUNC00000006 2 - 155453 155919 255,0,0 2 92,59 ## V12 ## 1 0,589 ## 2 0,3346 ## 3 0,11294 ## 4 0,2208 ## 5 0,5626 ## 6 0,407 Cufflink verwerkt de uitgelijnde RNA-Seq-reads die van Tophat komen en bouwt ze op in de transcripten en exonen. transcripts &lt;- read.table(&quot;lumbricus/protocol1/data_processing/TOPHAT/transcripts.gtf&quot;, sep=&quot;\\t&quot;) colnames(transcripts) &lt;- c(&quot;chr&quot;, &quot;versie&quot;, &quot;feature&quot;, &quot;start&quot;, &quot;end&quot;, &quot;score&quot;, &quot;strain&quot;, &quot;v8&quot;) transcripts %&gt;% select(1:5) %&gt;% head() ## chr versie feature start end ## 1 OX457036.1 Cufflinks transcript 109191 109546 ## 2 OX457036.1 Cufflinks exon 109191 109546 ## 3 OX457036.1 Cufflinks transcript 124949 125423 ## 4 OX457036.1 Cufflinks exon 124949 125423 ## 5 OX457036.1 Cufflinks transcript 135006 155436 ## 6 OX457036.1 Cufflinks exon 135006 135832 We gaan de outputbestanden van Tophat+Cufflink, namelijk accepted_hits.bam en junctions.bed, in IGV zetten, samen met het transcriptbestand van Cufflinks. Eerst hebben we een bed-bestand nodig. awk &#39;{if($3==&quot;exon&quot; ) {print $1,$4,$5, $7, $3 }}&#39; transcripts.gtf &gt; exon_ids.bed awk &#39;{if($3==&quot;transcript&quot; ) {print $1,$4,$5, $7, $3 }}&#39; transcripts.gtf &gt; tranasctips_ids.b Bekijk de bed-bestanden voor de genoombrowser: exons_ids &lt;- read.table(&quot;lumbricus/protocol1/data_processing/TOPHAT/igv/exon_ids.bed&quot;, sep=&quot;\\t&quot;) transcript_ids &lt;- read.table(&quot;lumbricus/protocol1/data_processing/TOPHAT/igv/transctipts_ids.bed&quot;, sep=&quot;\\t&quot;) head(exons_ids) ## V1 ## 1 OX457036.1 109191 109546 . exon ## 2 OX457036.1 124949 125423 . exon ## 3 OX457036.1 135006 135832 - exon ## 4 OX457036.1 136279 136300 - exon ## 5 OX457036.1 139625 139661 - exon ## 6 OX457036.1 150919 150988 - exon head(transcript_ids) ## V1 ## 1 OX457036.1 109191 109546 . transcript ## 2 OX457036.1 124949 125423 . transcript ## 3 OX457036.1 135006 155436 - transcript ## 4 OX457036.1 135006 156649 - transcript ## 5 OX457036.1 135006 156649 - transcript ## 6 OX457036.1 135006 156649 - transcript Bekijk de exonen (diepblauw) en transcripties (lichtblauw) in IGV: Figure 4.1: exon-transcripts structure chr1:23kb Vervolgens plaatsen we junctions.bed (rood) en geaccepteerde hits of reads (grijs) op dezelfde track om de exon-intronstructuur te visualiseren. Figure 4.2: exon-intron structure chr1:23kb, reads in grey Voordat we GeneMarkET uitvoeren, verzamelen we enkele statistieken uit de primaire analyse. Eerst bekijken we de gemiddelde introns, exonen en lengtes. introns &lt;- read.table(&quot;lumbricus/protocol1/data_processing/TOPHAT/introns.gff&quot;, sep=&quot;\\t&quot;) colnames(introns) &lt;- c(&quot;chr&quot;,&quot;aligner&quot;,&quot;structure&quot;, &quot;start&quot;, &quot;end&quot;, &quot;score&quot;, &quot;strand&quot;, &quot;v8&quot;, &quot;v9&quot;) head(introns) ## chr aligner structure start end score strand v8 v9 ## 1 OX457036.1 TopHat2 intron 135833 136278 16 - . . ## 2 OX457036.1 TopHat2 intron 136301 139624 13 - . . ## 3 OX457036.1 TopHat2 intron 139662 150918 9 - . . ## 4 OX457036.1 TopHat2 intron 150989 153126 1 - . . ## 5 OX457036.1 TopHat2 intron 150989 156555 1 - . . ## 6 OX457036.1 TopHat2 intron 155546 155860 2 - . . introns_length &lt;- introns %&gt;% mutate(ilength=end-start) max_intron &lt;- max(introns_length$ilength) %&gt;% round(digits = 1) avr_intron &lt;- mean(introns_length$ilength) %&gt;% round(digits = 1) exons &lt;- read.table(&quot;lumbricus/protocol1/data_processing/TOPHAT/transcripts.gtf&quot;, sep=&quot;\\t&quot;) exons &lt;- exons %&gt;% select(1:5) colnames(exons) &lt;- c(&quot;chr&quot;,&quot;aligner&quot;,&quot;structure&quot;, &quot;start&quot;, &quot;end&quot;) exons_length &lt;- exons %&gt;% mutate(elength=end-start) max_exon &lt;- max(exons_length$elength) %&gt;% round(digits = 1) max_exon ## [1] 255549 avr_exon &lt;- mean(exons_length$elength) %&gt;% round(digits = 1) maximale lengte van intron : 2.91919^{5} gemiddelde intronlengte 4760.9 maximale lengte van exon : 2.55549^{5} gemiddelde lengte exon 1719.6 plot 4.1 GenemarkET. Model opbouwen (protocol 1). mRna pijplijnne 4.2 Deel 1. Model opbouwen Het script bed_to_gff.pl van GeneMarkES maakt introns.gff aan vanuit de TopHat junctions.bed. Dit bestand bevat informatie over de strengen en kan direct gebruikt worden met GeneMarkET (protocol 1, script 2). introns &lt;- read.table(&quot;lumbricus/protocol1/data_processing/TOPHAT/introns.gff&quot;, sep=&quot;\\t&quot;) colnames(introns) &lt;- c(&quot;chr&quot;,&quot;aligner&quot;,&quot;structure&quot;, &quot;start&quot;, &quot;end&quot;, &quot;score&quot;, &quot;strand&quot;, &quot;v8&quot;, &quot;v9&quot;) head(introns) ## chr aligner structure start end score strand v8 v9 ## 1 OX457036.1 TopHat2 intron 135833 136278 16 - . . ## 2 OX457036.1 TopHat2 intron 136301 139624 13 - . . ## 3 OX457036.1 TopHat2 intron 139662 150918 9 - . . ## 4 OX457036.1 TopHat2 intron 150989 153126 1 - . . ## 5 OX457036.1 TopHat2 intron 150989 156555 1 - . . ## 6 OX457036.1 TopHat2 intron 155546 155860 2 - . . Om genemark met introns.gff uit te voeren: ../../gmes_petap.pl --verbose --sequence genome.fa --ET introns.gff GeneMarkET gaat een ghmm-model en genemark.gtf produceren. Dit bestand(gtf) bevat informatie over de start- en eindcoördinaten van genen, die in de daaropvolgende stap gebruikt zal worden. cut -f 2,3,4,5 lumbricus/protocol1\\ /data_processing/GeneMarkES/genemark.gtf | head ## cut: lumbricus/protocol1: Is a directory ## cut: /data_processing/GeneMarkES/genemark.gtf: No such file or directory Genemark maakt gebruik van filterGenemark.pl voor kwaliteitscontrole. Dit zorgt ervoor dat alleen de genmodellen die geregistreerd zijn in de exon-intronstructuur behouden blijven. (protocol1, script3) Na het filteren van de primaire resultaten wordt er een set van 1.975 genmodellen voor één chromosoom opgeslagen in genemark.f.good.gtf. cut -f 2,3,4,5 lumbricus/protocol1/data_processing/GeneMarkES/genemark.f.good.gtf | head ## GeneMark.hmm3 stop_codon 51009 51011 ## GeneMark.hmm3 CDS 51009 54860 ## GeneMark.hmm3 exon 51009 54860 ## GeneMark.hmm3 start_codon 54858 54860 ## GeneMark.hmm3 stop_codon 82883 82885 ## GeneMark.hmm3 CDS 82883 86734 ## GeneMark.hmm3 exon 82883 86734 ## GeneMark.hmm3 start_codon 86732 86734 ## GeneMark.hmm3 stop_codon 116110 116112 ## GeneMark.hmm3 CDS 116110 117048 Genemark.f.good.gtf is nu klaar om een trainingsset te maken van (protocol1, stap 4 en 5). Eerst wordt gtf omgezet naar gb. Zie protocol1, data_processing, Bonafide. gff2gbSmallDNA.pl bonafide.gtf genome.fa 450 tmp.gb filterGenesIn_mRNAname.pl bonafide.gtf tmp.gb &gt; bonafide.gb cat lumbricus/protocol1/data_processing/bonafide/bonafide.gb | head ## LOCUS OX457036.1 Lumbricus terrestris genome assembly, chromosome: 1_50559-55310 4752 bp DNA ## FEATURES Location/Qualifiers ## source 1..4752 ## mRNA complement(451..4302) ## /gene=&quot;1_t&quot; ## CDS complement(451..4302) ## /gene=&quot;1_t&quot; ## BASE COUNT 1219 a 994 c 853 g 1655 t 31 n ## ORIGIN ## 1 catccgtctt tttggaatcg atttttatcg tattctgaaa tgttcttatc aatcttacac 4.3 Etrain (protocol7) Op basis van de genen die we hebben verkregen via mRNA-alignment, gaan we een trainingsset opstellen om een nieuw model te trainen. In de vorige sectie hebben we bonafide.gb aangemaakt, waarin 1.975 geverifieerde genen voor een specifiek chromosoom zijn opgenomen. We zijn nu klaar om de ontwikkeling van een nieuwe species te starten. conda activate c new_species.pl --species=lumter etraining --species=lumter bonafide.gb &amp;&gt; bonafide.out Check for Stop Codonds: grep -c &quot;Variable stopCodonExcludedFromCDS set right&quot; bonafide.out 0 We hoeven geen bad lijst op te stellen, omdat er geen stopcodons in de CDS aanwezig zijn. grep -c LOCUS bonafide.gb 1975 Het randomSplit.pl-script splitst de data op in twee segmenten: een kleinere sectie genaamd test.gb voor trainingsdoeleinden, en een grotere sectie die train.gb wordt genoemd voor de evaluatie van het trainingsproces. randomSplit.pl bonafide.gb 200 mv bonafide.gb.test test.gb mv bonafide.gb.train train.gb etraining --species=lumter train.gb &amp;&gt; etrain.out Deze configuratie kan worden aangepast in het configuratiebestand (map config, species, lumter_parameters.cfg). tag: 511 (0.259) taa: 700 (0.354) tga: 764 (0.387) Evaluatie van de voorspelling: augustus --species=lumter test.gb &gt; test.out ******* Evaluation of gene prediction ******* ---------------------------------------------\\ | sensitivity | specificity | ---------------------------------------------| nucleotide level | 0.963 | 0.972 | ---------------------------------------------/ ----------------------------------------------------------------------------------------------------------\\ | #pred | #anno | | FP = false pos. | FN = false neg. | | | | total/ | total/ | TP |--------------------|--------------------| sensitivity | specificity | | unique | unique | | part | ovlp | wrng | part | ovlp | wrng | | | ----------------------------------------------------------------------------------------------------------| | | | | 78 | 87 | | | exon level | 389 | 398 | 311 | ------------------ | ------------------ | 0.781 | 0.799 | | 389 | 398 | | 56 | 6 | 16 | 56 | 6 | 25 | | | ----------------------------------------------------------------------------------------------------------/ ----------------------------------------------------------------------------\\ transcript | #pred | #anno | TP | FP | FN | sensitivity | specificity | ----------------------------------------------------------------------------| gene level | 389 | 398 | 311 | 78 | 87 | 0.781 | 0.799 | ----------------------------------------------------------------------------/ # total time: 31.2 # command line: # augustus --species=wormET0 test.gb See also: lumbricus/protocol1/test/test.out Hier eindigt onze mRNA-pijplijn, waarbij we een hoge specificiteitsscore hebben bereikt voor het model dat we hebben gemaakt voor Lumbricus Terrestris. Dit model zal dienen voor visualisatie. 4.4 ProtHints en de eiwitpijplijn 4.5 ProtHints Er zijn veel genen in verschillende genoom die door hun evolutionaire oorsprong met elkaar verbonden zijn. De gelijkenis tussen eiwitsequenties is goed zichtbaar. OrthoDB is een belangrijke bron voor eiwitten en dient als een database die eiwitten met een uitgebreider evolutionair verleden omvat. Zie protocol 2. ../bin/prothint.py ../OX457036.1.fasta ../Arthropoda.fa grep &quot;&gt;&quot; seed_proteins.faa | wc -l 14733 Prothint heeft een database met eiwitten voorbereid voor startAlign.pl. Het resultaat was 14.733 eiwitten in het bestand seed_proteins.faa. Dit seed-bestand kan worden gebruikt met startAlign.pl om een gth.concat.alg-object te verkrijgen, dat vervolgens wordt gebruikt om bonafide.gb te genereren. head lumbricus/protocol2/data_processing/ProtHints/seed_proteins.faa ## &gt;6249_g ## MPSVSGLIEMMMMMTATITVMMTVTTVRIVERLGWGSYDTDGDDGDDDDDDDDDDDDDDDDDDDDSNNNSSNPPQVTAELCRRELRRCRHRFRSTSSEMTAPPAASAAAAEPGHDGLRTVTELVSGSGSKFVADSTERMNSDDQVDLGNLHSLPPTDSPEALRACSVRTITRTIVDRRMSPIIKVIKGETSKNELLINLDYAARVSENIYIADDDVLGVVEQDSVPHEVREGQAQVQKCRQRHPGRHHVHAEAPKQLRVKDLLKVPTRRLEVDTNFEPSGFKATTPPLHHRAPPIILISITVVGALLSQDDDDDDIDDGEGMIMTTTRTTTMLIYL ## ## &gt;10626_g ## MLGRGDCERKKQGNGILETAIHEHAWLQYLEGTDERNGKKSKAGNLKAKREKLQKMRKGDIEEIGLLRGFAERKEKQGETEGLTGQVEEMEIDGPTTEKARHCLVAKRARGTSSCPFAAERRARRASMSETGRQRMRSNSIMDALGYWQPMQHITHVGIRPMSRAAERRTRSNRPRTPRGRPTRIEQQWSIRLNYQRIMRERACNHSKLTKLVVTASSNKIDMLAETEFTVKGNTQVTNRGRETNQRQIDLLKLPTATQPNELTDLTPSKRMVVDLLPRLQ ## ## &gt;2633_g ## MSSAHAHVNASRRQQRQTINVRQRKDGEGRRLKRGVLVGNSEDLTVNWVWKATRCRPVPLRYQGVSNETLRMNCNSTSGEGRFGTAIAIGVRRQKKGAKRQQDEKLPLLVKIQRGGRNYRVLCQLQHSPSTHLQKRIGNDGKQEEGDIPSSSNLHSNPYELKNFYIYAGEVQRGR ## ## &gt;1749_g Naast het seed_proteins.faa genereert protHints een prothint_augustus.gff hintsbestand dat je direct kunt gebruiken met augustus. head lumbricus/protocol2/data_processing/\\ ProtHints/prothint_augustus.gff ## OX457036.1 ProtHint stop 51009 51011 2 - 0 src=P;mult=9;pri=4;al_score=0.163636; ## OX457036.1 ProtHint start 52806 52808 2 - 0 src=P;mult=2;pri=4;al_score=0.2; ## OX457036.1 ProtHint intron 53104 53221 2 - . src=P;mult=1;pri=4;al_score=0.361685; ## OX457036.1 ProtHint intron 53515 53655 0 - . src=P;mult=1;pri=4;al_score=0.108387; ## OX457036.1 ProtHint start 55225 55227 0 - 0 src=P;mult=1;pri=4;al_score=0.104132; ## OX457036.1 ProtHint stop 82883 82885 2 - 0 src=P;mult=11;pri=4;al_score=0.163636; ## OX457036.1 ProtHint intron 84978 85095 2 - . src=P;mult=1;pri=4;al_score=0.361685; ## OX457036.1 ProtHint intron 85389 85529 0 - . src=P;mult=1;pri=4;al_score=0.108387; ## OX457036.1 ProtHint start 87099 87101 0 - 0 src=P;mult=1;pri=4;al_score=0.104132; ## OX457036.1 ProtHint intron 144544 144597 0 + . src=P;mult=1;pri=4;al_score=0.13595; We kunnen augustus meteen draaien met de prothint_augustus.gff die door de eiwitten zijn gemaakt, voordat we de trainingsset aanpakken. augustus --species=lumter\\ --predictionStart=2000000 --predictionEnd=3000000\\ OX457036.1.fasta\\ --extrinsicCfgFile=extrinsic.cfg\\ --hintsfile=prothint_augustus.gff \\ &gt; augustus.hints.prots.orthodb.arthropoda.2-3mb.gff Hierdoor ontstaat een annotatie voor 2mb-3mb van het chromosoom, gebaseerd op de eiwitindicaties van eiwitten die een lange evolutionaire afstand hebben. cat lumbricus/protocol2/data_processing\\ /ProtHints/augustus.hints.prots.orthodb.arthropoda.2-3mb.gff | \\ tail -n 50 ## # 3&#39;UTR exons and introns: 0/0 ## # hint groups fully obeyed: 0 ## # incompatible hint groups: 2 ## # P: 2 (407821_0:000ad4_584_g) ## # end gene g81 ## ### ## # start gene g82 ## OX457036.1 AUGUSTUS gene 2981898 2982863 1 - . g82 ## OX457036.1 AUGUSTUS transcript 2981898 2982863 1 - . g82.t1 ## OX457036.1 AUGUSTUS stop_codon 2981898 2981900 . - 0 transcript_id &quot;g82.t1&quot;; gene_id &quot;g82&quot;; ## OX457036.1 AUGUSTUS CDS 2981898 2982863 1 - 0 transcript_id &quot;g82.t1&quot;; gene_id &quot;g82&quot;; ## OX457036.1 AUGUSTUS start_codon 2982861 2982863 . - 0 transcript_id &quot;g82.t1&quot;; gene_id &quot;g82&quot;; ## # protein sequence = [MDDEETVPYSLPRTTSTPATKGAAEASAFGQSRAEAYRTFEDPEYQFLDLPKKDRKKVLISETTVSDSKRWEDASHLM ## # GPRKIQMKPGKFDGTSSLESFLTQFEVCARHNRWDDSDKVDFLRCALDKAATQLLWDFGARADVTYDQLVGRLRQRYGVEGQAETYRAQLYYRRQRAD ## # ESLSDLLHDIRRLVVLAYPVPSNETTEIVARDSFLEAIRDRELSLKVREREPKSIDEAYRVALRLSAYQQMTDVDDRRRPPNRVRQTQEADAGNQLQT ## # QLDGFLAAQRKWQRDFEDRISLQLNELRNQSQTHPDVAPATRNPASP] ## # Evidence for and against this transcript: ## # % of transcript supported by hints (any source): 100 ## # CDS exons: 1/1 ## # P: 1 ## # CDS introns: 0/0 ## # 5&#39;UTR exons and introns: 0/0 ## # 3&#39;UTR exons and introns: 0/0 ## # hint groups fully obeyed: 0 ## # incompatible hint groups: 1 ## # P: 1 (407821_0:000ad4_584_g) ## # end gene g82 ## ### ## # start gene g83 ## OX457036.1 AUGUSTUS gene 2983320 2984174 0.91 - . g83 ## OX457036.1 AUGUSTUS transcript 2983320 2984174 0.91 - . g83.t1 ## OX457036.1 AUGUSTUS stop_codon 2983320 2983322 . - 0 transcript_id &quot;g83.t1&quot;; gene_id &quot;g83&quot;; ## OX457036.1 AUGUSTUS CDS 2983320 2984174 0.91 - 0 transcript_id &quot;g83.t1&quot;; gene_id &quot;g83&quot;; ## OX457036.1 AUGUSTUS start_codon 2984172 2984174 . - 0 transcript_id &quot;g83.t1&quot;; gene_id &quot;g83&quot;; ## # protein sequence = [MEKAGLYFNLKKTKLMTTENWTSFEVDGEEMKVVTCFCFFGAMIENDGGCERYCGSLAGGINFFAVCVFFACSERTCL ## # SEPLVASSSCPLEPAPSSRLFARSNLPLRAARCLFELPDRTCPSEPPVRCSSRTCPSEPLAASSSCPLEPAPPSRLSACSGRLRPLRAASSLFELLAR ## # TSLFRTFAAESNLFVRAACLLLRTGLETYKRRKKKKPSFAVGIEVGESQSLRVNPSGVSQRNEKGSSSSVVRSPSPRKVISSIRQSEVSSSFKLRLKL ## # RLNSGQFVVE] ## # Evidence for and against this transcript: ## # % of transcript supported by hints (any source): 0 ## # CDS exons: 0/1 ## # CDS introns: 0/0 ## # 5&#39;UTR exons and introns: 0/0 ## # 3&#39;UTR exons and introns: 0/0 ## # hint groups fully obeyed: 0 ## # incompatible hint groups: 0 ## # end gene g83 ## ### ## # command line: ## # augustus --species=lumter --predictionStart=2000000 --predictionEnd=3000000 OX457036.1.fasta --extrinsicCfgFile=extrinsic.cfg --hintsfile=prothint_augustus.gff 4.6 Protocol 2. Het creëren van genstructuren voor training op basis van eiwitten. 4.7 GenomeThreader We hebben 14.733 eiwitten verzameld uit de eerdere secties. Nu gaan we een trainingsset opzetten met deze eiwitten. Uit de oorspronkelijke 14.733 eiwitten hebben we een klein deel gekozen om de trainingsset te vormen. startAlign.pl --genome OX457036.1.fasta \\ --prot seed_proteins.faa \\ --pos OX457036.1:1-10000000 \\ --prg gth Hierdoor ontstaat het object gth.concat.aln, dat vervolgens kan worden geconverteerd naar het gtf-formaat (protocol2 ,data_processing, protHints). gth.concat.aln bonafide.gtf Controleer het gtf-bestand : head lumbricus/protocol2/data_processing/Bonafid/bonafide.gtf ## OX457036.1 gth CDS 51009 54860 . - 0 gene_id &quot;OX457036.1_g_gene1_mRNA1&quot;; transcript_id &quot;OX457036.1_t_gene1_mRNA1&quot;; ## OX457036.1 gth exon 51009 54860 . - 0 gene_id &quot;OX457036.1_g_gene1_mRNA1&quot;; transcript_id &quot;OX457036.1_t_gene1_mRNA1&quot;; ## OX457036.1 gth CDS 82883 86734 . - 0 gene_id &quot;OX457036.1_g_gene2_mRNA2&quot;; transcript_id &quot;OX457036.1_t_gene2_mRNA2&quot;; ## OX457036.1 gth exon 82883 86734 . - 0 gene_id &quot;OX457036.1_g_gene2_mRNA2&quot;; transcript_id &quot;OX457036.1_t_gene2_mRNA2&quot;; ## OX457036.1 gth CDS 104626 104645 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth exon 104626 104645 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth CDS 104696 104750 . - 0 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth exon 104696 104750 . - 0 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth CDS 104904 105745 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth exon 104904 105745 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; computeFlankingRegion.pl bonafide.gtf Output van computeFlankingRegion.pl: Total length gene length (including introns): 5412279. Number of genes: 1090. Average Length: 4965.39357798165 The flanking_DNA value is: 2482 (the Minimum of 10 000 and 2482) gff2gbSmallDNA.pl bonafide.gtf genome.fa 2482 bonafide.gb Bonafide.gb wordt in de volgende pipeline gebruikt om redundantie te verwijderen. 4.8 Protocol 6.Verwijderen van Redundant Genstructuren (protocol 6) Voor NCBI Blast, controleer de link en stel het Path in naar de Blast uitvoerbare bestanden. wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ export PATH=\\(PATH:\\)HOME/ncbi-blast-2.16.0+ Maak gebruik van de opgegeven commandoregel om het GTF-bestand van de trainingsgenstructuur te transformeren naar een FASTA-bestand dat de eiwitsequentie omvat. gtf2aa.pl genome.fa bonafide.f.gtf prot.aa Inspecteer prot.aa : head lumbricus/protocol2/data_processing/Redundancy/prot.aa ## &gt;OX457036.1_t_gene395_mRNA512 ## ESLLPRCCPAGRGGGSQDSIAHARCFDRRITFSMMTLVGLGKEGLKRRKGGMDGERDLNWLEGGMGGEVQNWRVIGIERRY* ## &gt;OX457036.1_t_gene508_mRNA640 ## MEESRPVTPAQPSRPPSSMEVLLEAIQTNAKSTHDAMTSIQSSLQLNARDTQEAIATVELNVLAVQSNVREEISSVKSYVRDTQDAISSVQSNVSDAISSVQLNVREEISAVRDNVREALTEVVSRLERLETSPVPKPAVDLNPGYLTAITTADAPYHSTIGLEETLGARPKDFTQPGILRRSDRLAGRPPISYREYGSRKDWPPFLGWDSNPEVTSSCPPSISRARPQQHAVPSSEDPEVATPGMPIGAGISSLSQNDYSEALLARKLLGEKKEKQKKWKEGGMEKGKKMKKENKKEEKGKWTEEKGKNKNGKKKEKEKERK* ## &gt;OX457036.1_t_gene532_mRNA668 ## MTCLRRIEGVTRRERIRNTEIHNRLKIQRDIVDRIQIRRMRYFGHVVRMQSGRYPKVALQGYVHGKRRRGRPRKRWMDVAEEDCLRMGLTVGEATRRAQDRDDWRLSIKERLMRAKASPAP* ## &gt;OX457036.1_t_gene891_mRNA1213 ## GKGRVNGCCFWRIRSGKLVREISTFCDIEFCEFCKFGRDSFEVSCRGGKMASLEEELIPEFGDVRDIPSDTLRLVSETYGEEVEDVSRSQVRRMAMKPLSPKLGSAAWKLKAQAKKEEAELERLHLKEDREWEREKERMRFEEKKMQIEAEREEKKMQIEAEREEKKMQIEAEENKLRIEAEENKLRIAAEENKLRIEAEETKRRFDMEEKRMNMEFEKQKLEMDGRRIEGGGAVERPAHGNEDLRFGAALKFVPKFDSADIEHYFAAFEQAMTLHQIPMGKWSSLLQPQLSGKAAKVFAALSLEECVQYDIVKSALLTAYERIPEFYRKKFRGLRKEPRETYANYAFRLQSPFQRWIEGTNSWEELAKFKEVILMEQFVQALPIEVHRWLIDKSPDTVASAARLADEYAVLYKQGPNHYSGGFRRDFFDRTRGFSSDESEKKDVWERQGVGYKDGTRRDTNWGRRSPQRGTYGFNKPGRENDDVTGFGEPVTCAFCRAPGHTKASCWKLKRKEGTQMENWRGAKPVGLVQTVSAPVKPQSFPKPIESVDKLYAPFCVIGCVIDDEGARKEAVFLRDSGALQSLVSNEWLNEHEFVHMNETRLLRGISGSIVECPLVKVNVDCAFVQGEVLCCLMNSLPMAGVHCIVGNDTALAGQVLEVAVTTRAQARAHAVRQSERETAVCSEAAPEQSEIVGQSTESADQERTPGEIIDRQVERMNFDEGDLSSLFAATESVVTERSELYVSRQELILRQRRCPELRPLYAQVDETVSVGGRVQPYALVDEVLVRRWEEKCTPLGMGVVQIVVPRDLRQKLLHVAHDIPAAGHLGTRKTLDRLTKHFWWPHVNRDVREFCRSCDVCQRLGKGNRNYRAPMVSMPVMEEVFQRLAMDIVGPLSVCEGTGNRFILTVVDLASHFPFAFPLKNHTAQDVAKCLCEVFSLFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXDMLKALAETYPGSWDAMLPWILFAYREVPVQGTGFSAFDLMYGRDVRGMLQLMKEEWLAKDVVHEVSGKNVIDYVLQLRERMRVGLKLAGENAVDAKSKSKQLYDKQSRAVSFEEGEKVLLLIPLVGKPLQTKYGGPYVVVRRLGPVDYLVSTPDRRKTERVVHVNLMKRYVDRMDVVYERPNEEVVASVLVVNPDVRMNDVTLEDKVLQCEVSAECRAELRDVLHDFAHVFSDVPGKTSMVSHRIDLVEGARPVRQYPYRLNPEKMARVDKEVNQLLEAGIIEESESPWAAPIVLVPKPNGTDRLCTDFRKLNGLSVPDPFLMPRVEVLIDRVGQSRFITKLDMTKGYWQIPMHPESVPLTAFVTPKGHYQWKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXLSRIADACLSLNLAKCVFANASVDFLGHHIGIDGVQPRLKKVEAVLKFPRPATKKQVQSFLGLAGYYQRYLPHFSDITLPLTALTKKGIPFRWNEEAEVAFLDLKSRLASRPILIPPDFTKQFCVGVDASQFCLGACLFQMKDGLEHPICYLSRKLLPQEIRYSTIEKEALALMVALRAFSVYFGSAVVLVPHVLVGGYVSVSYLLPLWASLLGLSLTMWELREGQAWRVVRVLRRLSSSIAVPPRW* ## &gt;OX457036.1_t_gene296_mRNA397 ## WSEEPEEGDGVWLVMIVEELQKIGIHEADHSMVDHIRNEEVLKLAGSRYLEYIIMGRRGRLAGHILRLPKERIARTAIKWVPEGGKRRRGRPRNTWRRTFKGDLERMGLGWNEAEEVADDRVEWRGLVDQCSDRNRRK* Voer een Blast uit van alle eiwitsequenties uit de vorige stap met elkaar en toon alleen de eiwitsequenties die minder dan 80% identiek zijn aan een andere sequentie in de groep. aa2nonred.pl prot.aa prot.nr.aa head lumbricus/protocol2/data_processing/Redundancy/prot.nr.aa grep &quot;&gt;&quot; lumbricus/protocol2/data_processing/Redundancy/prot.nr.aa | wc -l ## &gt;OX457036.1_t_gene753_mRNA930 ## SIVGAATEVYNRMSSDFLPTPTKSHYIFNLRDLSKCIQESKQVFRLFCHEALRVFHDRLTTSEDKMSFYAILAEIAPKFFNENADAQSFLKHPIIFGDFIKVAAPREDRVYEDLGNLDKIKGALQDIVVEEFLEDINNILNSGEVPNLFEPEEYEMNIVGCRPAAKEVGVAEGNRDGIYEFFINREALLSVSQTAFMPADIGSEEIKASNNGLTKLLETNELIDKMKGDLVALEPELRKKSEDTNVLMEKLAADQEKADTVRKVVMEDEAVAKVKAEETQAIAEDAQRDLDEALPALEAAIRDISEIRVFIKPPELVQTVMEAGFLKSLYEYKKDLIPDAVLKKLKKYTDNPKFTPEAVEKVSKVVMKTLREKQKMLAEVEAKIAELQKTYDISVAEKQRLEKSMSLTQARLRRAGKLTTALADEKTRWEESVALSTIIGDVFVSAACIAYYGAFTSNYRQELVALWARRCVELNIPVSKNMSLVSVLADPYEIRQWNTDGLPRDSVSTENAILVTRGRRWPLMIDPQEQNSIRLGIPVLLEDISETIDPSLEPVLLKQTFMSGGRLVIRLGDSNIEYGKGFKFYMTTKLSNPHYLPEVCIKVTIINFTVTKTGLEDQLLSEVVSLERPDLEEQRNQLIVKINTDKNQLKAIEDRILKLLFESEGNILDNEDLVTSGVISVRLKEAEATEEKISVNRERYRVVATRGSVMFFVVANMAEADPMYQFSLKYFKQLFSGTIQHSESNKELQKRLQILLQATTVDWWCHCLEAGRFESTSSRHIMKIGGLITTDEWNYFLRGAAGLKKELPRKPDIGWLSQALWKESWNMEFMLRSFVGLSRDMTATPCWVQFGQLKFRANPERSNTYGPEPPEPPPLNPGSKEDLADDGKVKGHWDKRLTPFQKLIFIKAFEEEKENLGPSFIESPPTDLATLYADMLNVTPLVFVLSTGSDPMGAFQRFARERGFQDRIQSISLGQGQGPVAEKMILAAYLTGDWVFLQDIVKEMGEKPQTVHPSFRLFLSSMPDVSFPVSVLQNSVKYEFNDCDRECALLNLNMFCVNEVIPWDALIYITGEIQETSNLIATILDMQPRLTGGGAGKSNDDIVYELAADILAQLMDKLDIEEAKQDTFENHARKYGLPVDHLSFKYNVLPVYRDQVEVAEALAKQQFGEEIEPDRKLTSPTDGLLVHGLFMDGFRWDGENRALADALPGEMNSALPVLHMEPVMDYEAEESDYQAPLYKTAARAGVLSTTEKDMCQVARDWLKAIVTALVTTVHCLITNDYRLFFSVSLLQGIRQTLL* ## &gt;OX457036.1_t_gene803_mRNA1030 ## SQKSRASATIVVCDLDHMMIRLPHFTAKRSVEPFQSTEEQVLGRIRSFPQGSSGGPDGLRPQHLSDLVNCVEIGSELIFAITGLVNLLLKGECPEDIRPVLFGGTLMALRKDSGGLRPIVIGYYWRRLASKCANAFAVTRATAYLAPRQVGVGVPGGAEAAVHAARRFLETMPAGSILVKLDFKNAFNSLYRDQMLSSIDDILPELSPFCHLAYAEPSELRFGQYLISSQVGPQQGDPLGPLLFCLPLQPILQDLSSPLVLGYMDDLSLGGEAVLVAKDVNLLMQKCEQLGLQLNQKKCEIIYQHDLQSHDHLFQNFTVTSPERACLLGAPLSTSEALTTCLEGRCTELALAINRLETIAKHDALILLRCSLSSHRLMYTLRCSPCTGNVLLDKFDGLIRNGLSAVLNIALSNDQWLQASLPVKMGGLGIRRVASLALPAFLASAASTRALQSSMLGNACPEFDERVELMKHLWCTESQSGLPESSVAHKQSSWDKPLMQKMIAELSIALSDPYHKARFMAVAAPHAGDWLFALPVTSCGLRLDDEAVRIAVGLRLGTCICEPHACPCGARVTANGAHGLSCGLGPGRIARHATLNDLFSRSLTRAGFPNIKEPPGLSRSDGRRPDGLTLIPWYKGRNLVWDATVIDTVAPSYIPATSLSAGAAAGLAATRKVDKYNHLTATYLFVPLAFETMGPINIEGMKLLKDLGRLLTRITGDPKETTYLFQRFSVCIQRFNASQPQSTEIGQSFIFCDNTNPEDKSNHTTAIRHPDLPNGLLRHIPKGARTAAAHLLTDIIGGILREPLLPSGWLRLLSFVSGALEKPTRGGKRHNLTQHIKLRIDTFKNDWQTSASLLFWYVLRQRSRRKSKEAASRSQHRGRCSSQARGRQSQRCGAHSLLRRHTSSN* ## &gt;OX457036.1_t_gene103_mRNA135 ## MSINFAQRIQMPGIERVHGVTKVRNEFNILGYSVSFRYVISVFEDRIPYRLRKEIRLTGIRNAVDIGSSENANCLYVSDYEEKCVRKITRERDGGHKIIKWLITAYRPNTLSVTGEGHLLVVNSWSSILSIYGSDAQLIRFIQLPRGMSYPLHAVETSIGNFIVIHEWIEKEEEGKSGSIGRESDLIKEVNIKDDEDSRSITTIDDEEEGEEEQTWPTAKTTVTV ## &gt;OX457036.1_t_gene500_mRNA632 ## IMRAEIQGRLNRGRQKKSWMDMIQQDMEFLGLRKEEVRDRTTWRQRIRINGLKYVYVYGHVSVNMKDIIIEHRLTVAELHFLKRAEILDRREKPLDVERKRQTETETGRQTERGRENERERERERERQRERQTDRETERQRERQTERQRDRERERERERENEITRQRDRVIERERERQRERHTETERERDAE* ## &gt;OX457036.1_t_gene503_mRNA635 ## MCEVAEYFENGELVIFDDSDPAPSYADEMESDEMDDSKSDFPEAECAMALLELAQSFGLVSSLNSFGHINDETGLRNAATEPSNVPLNNTAENLASTADARQHFSAFSNVVPIDESHLRVTPDCSTRTSAFDLLTVVRLDHSYETRRPHAPGSASSGNRAVKKAKSETTLDKLRKIRKRNGKRKPEVAERNDERRALESSSSPHSDRNIFAAAAAVSHLKSQSHPPHLSNTNAWKEEVPLEEPFKIPPAKAGVGIRGRRDELFSS* ## 602 Daarna hebben we 602 niet-redudante eiwitten om mee verder te gaan: grep &quot;&gt;&quot; lumbricus/protocol2/data_processing/Redundancy/prot.nr.aa | wc -l ## 602 cat bonafide.gb | perl -ne ’if(m/\\/gene=\\&quot;(\\S+)\\&quot;/){ \\ print &quot;\\&quot;&quot;.$1.&quot;\\&quot;\\n&quot;;}’ | sort -u &gt; traingenes.lst regel 1: syntaxisfout bij onverwacht token `(’ Dit leverde een syntaxisfout op, waarna alle perl -ne regex werden vervangen door Python regex, die werden uitgevoerd in de IDE. import re import subprocess # Read from the file &#39;bonafide.gb&#39; with open(&#39;bonafide.gb&#39;, &#39;r&#39;) as file: content = file.read() # Find all unique gene names gene_names = set(re.findall(r&#39;/gene=&quot;(\\S+)&quot;&#39;, content)) # Writing unique gene names to a file with open(&#39;traingenes.lst&#39;, &#39;w&#39;) as f: for gene in sorted(gene_names): f.write(f&#39;&quot;{gene}&quot;\\n&#39;) De uitvoer bevat de strings die als transcriptnamen worden gebruikt in het bonafide.gtf-bestand, waaruit bonafide.gb oorspronkelijk is gemaakt, met aanhalingstekens. head lumbricus/protocol2/data_processing/Redundancy/traingenes.lst ## &quot;OX457036.1_t_gene1000_mRNA1441&quot; ## &quot;OX457036.1_t_gene1001_mRNA1448&quot; ## &quot;OX457036.1_t_gene1002_mRNA1452&quot; ## &quot;OX457036.1_t_gene1003_mRNA1454&quot; ## &quot;OX457036.1_t_gene1004_mRNA1455&quot; ## &quot;OX457036.1_t_gene1006_mRNA1462&quot; ## &quot;OX457036.1_t_gene1007_mRNA1463&quot; ## &quot;OX457036.1_t_gene1008_mRNA1464&quot; ## &quot;OX457036.1_t_gene1009_mRNA1468&quot; ## &quot;OX457036.1_t_gene100_mRNA132&quot; Hierna volgt een reeks scripts/opdrachten die alleen bedoeld zijn om een lijst te verkrijgen van niet-redudante genen en hun bijbehorende loci in GeneBank.Dit is voornamelijk een bewerking voor tekstbestanden grep -oE &#39;(OX457036[A-Za-z1-9._]{1,})\\w+&#39; prot.nr.aa &gt; nonred.lst head lumbricus/protocol2/data_processing/Redundancy/nonred.lst ## OX457036.1_t_gene753_mRNA930 ## OX457036.1_t_gene803_mRNA1030 ## OX457036.1_t_gene103_mRNA135 ## OX457036.1_t_gene500_mRNA632 ## OX457036.1_t_gene503_mRNA635 ## OX457036.1_t_gene504_mRNA636 ## OX457036.1_t_gene573_mRNA720 ## OX457036.1_t_gene618_mRNA766 ## OX457036.1_t_gene384_mRNA500 ## OX457036.1_t_gene496_mRNA628 Isoleer de genen in traingenes.lst van bonafide.gtf: grep -f traingenes.lst -F bonafide.gtf &gt; bonafide.f.gtf head lumbricus/protocol2/data_processing/Redundancy/bonafide.f.gtf ## OX457036.1 gth CDS 51009 54860 . - 0 gene_id &quot;OX457036.1_g_gene1_mRNA1&quot;; transcript_id &quot;OX457036.1_t_gene1_mRNA1&quot;; ## OX457036.1 gth exon 51009 54860 . - 0 gene_id &quot;OX457036.1_g_gene1_mRNA1&quot;; transcript_id &quot;OX457036.1_t_gene1_mRNA1&quot;; ## OX457036.1 gth CDS 82883 86734 . - 0 gene_id &quot;OX457036.1_g_gene2_mRNA2&quot;; transcript_id &quot;OX457036.1_t_gene2_mRNA2&quot;; ## OX457036.1 gth exon 82883 86734 . - 0 gene_id &quot;OX457036.1_g_gene2_mRNA2&quot;; transcript_id &quot;OX457036.1_t_gene2_mRNA2&quot;; ## OX457036.1 gth CDS 104626 104645 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth exon 104626 104645 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth CDS 104696 104750 . - 0 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth exon 104696 104750 . - 0 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth CDS 104904 105745 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; ## OX457036.1 gth exon 104904 105745 . - 2 gene_id &quot;OX457036.1_g_gene3_mRNA3&quot;; transcript_id &quot;OX457036.1_t_gene3_mRNA3&quot;; grep -oE &#39;(OX457036[A-Za-z1-9._]{1,})\\w+&#39; prot.nr.aa &gt; nonred.lst head lumbricus/protocol2/data_processing/Redundancy/nonred.lst ## OX457036.1_t_gene753_mRNA930 ## OX457036.1_t_gene803_mRNA1030 ## OX457036.1_t_gene103_mRNA135 ## OX457036.1_t_gene500_mRNA632 ## OX457036.1_t_gene503_mRNA635 ## OX457036.1_t_gene504_mRNA636 ## OX457036.1_t_gene573_mRNA720 ## OX457036.1_t_gene618_mRNA766 ## OX457036.1_t_gene384_mRNA500 ## OX457036.1_t_gene496_mRNA628 In nonred.lst gaan we nu een niet-redundante subset van genen vinden. Voor het filteren van het bestand bonafide.gb hebben we een lijst met loci-namen nodig in plaats van genenamen. cat bonafide.gb | perl -ne ’ if ( $_ =~ m/LOCUS\\s+(\\S+)\\s/ ) { $txLocus = $1; } elsif ( $_ =~ m/\\/gene=\\&quot;(\\S+)\\&quot;/ ) { $txInGb3{$1} = $txLocus } if( eof() ) { foreach ( keys %txInGb3 ) { print &quot;$_\\t$txInGb3{$_}\\n&quot;; } }’ &gt; loci.lst Unrecognized character \\xE2; marked by &lt;-- HERE after &lt;-- HERE near column 1 at -e line 1. cat: write error: Broken pipe ./test.sh: line 2: syntax error near unexpected token `(&#39; ./test.sh: line 2: `if ( $_ =~ m/LOCUS\\s+(\\S+)\\s/ ) {&#39; Deze commando van het protocol veroorzaakte een fout en is vervangen. Het is nu locilist.py (scripts, protocol2). import re txInGb3 = {} txLocus = &quot;&quot; with open(&quot;bonafideOrtho.gb.db&quot;) as file: for line in file: if re.search(r&#39;LOCUS\\s+(\\S+)\\s&#39;, line): txLocus = re.search(r&#39;LOCUS\\s+(\\S+)\\s&#39;, line).group(1) elif re.search(r&#39;/gene=&quot;(\\S+)&quot;&#39;, line): gene = re.search(r&#39;/gene=&quot;(\\S+)&quot;&#39;, line).group(1) txInGb3[gene] = txLocus with open(&quot;loci.lst&quot;, &quot;w&quot;) as output_file: for key in txInGb3.keys(): output_file.write(f&quot;{key}\\t{txInGb3[key]}\\n&quot;) en nonred.loci.py (scripts, protocol2)): import subprocess with open(&#39;nonred.lst&#39;, &#39;r&#39;) as f: patterns = f.read().splitlines() with open(&#39;loci.lst&#39;, &#39;r&#39;) as f: loci = f.read().splitlines() matched_loci = [locus.split(&#39;\\t&#39;)[1] for locus in loci if any(pattern in locus for pattern in patterns)] with open(&#39;nonred.loci.lst&#39;, &#39;w&#39;) as f: f.write(&#39;\\n&#39;.join(matched_loci)) wat nonred.loci.lst en loci.lst (met 2 kolommen) produceert: head lumbricus/protocol2/data_processing/Redundancy/nonred.loci.lst ## OX457036.1_102144-115856 ## OX457036.1_161655-167728 ## OX457036.1_180282-185623 ## OX457036.1_225887-235418 ## OX457036.1_345964-351295 ## OX457036.1_411769-417637 ## OX457036.1_418604-428585 ## OX457036.1_428586-437296 ## OX457036.1_468333-473965 ## OX457036.1_488481-495418 head lumbricus/protocol2/data_processing/Redundancy/loci.lst ## OX457036.1_t_gene1_mRNA1 OX457036.1_48527-57342 ## OX457036.1_t_gene2_mRNA2 OX457036.1_80401-89216 ## OX457036.1_t_gene3_mRNA3 OX457036.1_102144-115856 ## OX457036.1_t_gene4_mRNA4 OX457036.1_138781-147529 ## OX457036.1_t_gene5_mRNA5 OX457036.1_161655-167728 ## OX457036.1_t_gene6_mRNA6 OX457036.1_180282-185623 ## OX457036.1_t_gene7_mRNA7 OX457036.1_225887-235418 ## OX457036.1_t_gene8_mRNA8 OX457036.1_321850-327440 ## OX457036.1_t_gene9_mRNA9 OX457036.1_345964-351295 ## OX457036.1_t_gene10_mRNA10 OX457036.1_389861-394620 filterGenesIn.pl nonred.loci.lst bonafide.gb &gt; bonafide.f.gb Deze commando haalt enkel de laatste locus uit de bonafide.gb. Het doel is om alle unieke loci uit de bonafide.gb te verzamelen, niet alleen de laatste. Om alle unieke loci te krijgen, moeten we dit in een loop zetten (protocol2, scripts, bonafide.nonred.f.py). import re origfilename =&quot;bonafideRED.gb&quot; goodfilename =&quot;nonred.loci.lst&quot; goodlist = {} with open(goodfilename, &#39;r&#39;) as goodfile: for line in goodfile: goodlist[line.strip()] = 1 with open(origfilename, &#39;r&#39;) as origfile: content = origfile.read().split(&#39;\\n//\\n&#39;) for gendaten in content: match = re.match(r&#39;^LOCUS +(\\S+) .*&#39;, gendaten) if match: genname = match.group(1) if genname in goodlist: with open(&#39;bonafide.filtered.nonred.gb&#39;, &#39;a&#39;) as f2: f2.write( gendaten+ &#39;\\n&#39;+&#39;//&#39;+&#39;\\n&#39;) f2.close() grep -c LOCUS lumbricus/protocol2/data_processing/Redundancy/bonafide.f.nonred.gb ## 602 Na deze fase zijn er 602 verschillende loci in Bonafide. 4.9 Trainingsset van Proteins.Etrain We hebben in de vorige sectie 602 niet-redundante genstructuren ontdekt die kunnen dienen om een nieuwe soort te ontwikkelen. Creëer een nieuwe species new_species.pl --species=wormNonredEP etraining --species=wormNonredEP bonafide.gb &amp;&gt; bonafide.out Check for stop-codons: grep -c &quot;Variable stopCodonExcludedFromCDS set right&quot; bonafide.out 49 We moeten 49 stopcodons uitfilteren.Bad List: etraining --species=wormNonredEP bonafide.gb 2&gt;&amp;1\\ | grep &quot;in sequence&quot; \\ | sed -E &#39;s/.*n sequence (\\\\S+):.*/\\\\1/&#39; \\ | sort -u &gt; bad.pre.list grep -oE &quot;in sequence.*(OX457036.[1-9A-Za-z_0-]{1,})\\w+&quot; \\ bad.pre.list\\ | grep -oE &quot;(OX457036.[1-9A-Za-z_0-]{1,})\\w+&quot;&gt; bad.list head lumbricus/protocol2/data_processing/bad-list/bad.list ## OX457036.1_80264327-80269533 ## OX457036.1_3169142-3174603 ## OX457036.1_3169142-3174603 ## OX457036.1_82306032-82311964 ## OX457036.1_83519819-83526493 ## OX457036.1_85356189-85367403 ## OX457036.1_3254876-3258078 ## OX457036.1_87513969-87519492 ## OX457036.1_3258079-3261568 ## OX457036.1_92067632-92073579 Vervolgens fitler bad.list uit bonafide.gb: perl filterGenes.pl bad.list bonafide.filtered.nonred.gb \\ &gt; bonafide.filtered.gb grep -c LOCUS bonafide.gb bonafide.filtered.gb bonafide.gb:602 bonafide.filtered.gb:373 ln -s bonafide.filtered.gb bonafide.gb test.gb is een klein bestand dat dient voor training. Train.gb is een groot bestand dat gebruikt wordt om de training te evalueren. randomSplit.pl bonafide.gb 200 mv bonafide.gb.test test.gb mv bonafide.gb.train train.gb etraining --species=wormNonredEP train.gb &amp;&gt; etrain.out cat lumbricus/protocol2/data_processing/Bonafid/etrain.out ## # Read in 373 genbank sequences. ## Quantiles of the GC contents in the training set: ## 0% 0.351 ## 5% 0.385 10% 0.388 ## 15% 0.393 20% 0.397 ## 25% 0.4 30% 0.403 ## 35% 0.405 40% 0.407 ## 45% 0.412 50% 0.415 ## 55% 0.417 60% 0.419 ## 65% 0.425 70% 0.429 ## 75% 0.432 80% 0.438 ## 85% 0.446 90% 0.456 ## 95% 0.478 100% 0.596 ## HMM-training the parameters... ## i= 0 bc= (0.237, 0.263, 0.263, 0.237) ## ** building model for exons *EXON* ## gene OX457036.1_t_gene1093_mRNA1640 transcr. 1 in sequence OX457036.1_98424851-98432363: Initial exon does not begin with start codon but with ttc ## start codon frequencies: ATG(372) ## # admissible start codons and their probabilities: ATG(1), CTG(0), TTG(0) ## number of bases in the reading frames: 160917 161284 161285 ## --- frame = 0 --- minPatSum = 233 ## --- frame = 1 --- minPatSum = 233 ## --- frame = 2 --- minPatSum = 233 ## --- initial frame = 0 --- minPatSum = 233 ## --- initial frame = 1 --- minPatSum = 233 ## --- initial frame = 2 --- minPatSum = 233 ## --- internal exon terminal frame = 0 --- minPatSum = 233 ## --- internal exon terminal frame = 1 --- minPatSum = 233 ## --- internal exon terminal frame = 2 --- minPatSum = 233 ## single, initial, internal, terminal mean exon lengths : ## 934 275 199 246 ## single exon : 66 ## initial exon 0 : 134 ## initial exon 1 : 79 ## initial exon 2 : 93 ## internal exon 0 : 511 ## internal exon 1 : 196 ## internal exon 2 : 193 ## terminal exon : 307 ## Frequency of stop codons: ## tag: 97 (0.26) ## taa: 102 (0.273) ## tga: 174 (0.466) ## end *EXON* ## Storing parameters to file... ## Writing exon model parameters [1] to file /home/alena/anaconda3/envs/c/config/species/wormNonredEP/wormNonredEP_exon_probs.pbl. tail -6 etrain.out | head -3 tag: 97 (0.26) taa: 102 (0.273) tga: 174 (0.466) Je moet deze waarden corrigeren in je wormNonredEP_parameters.cfg in config map augustus --species=wormNonredEP test.gb &gt; test.out Eerst werd er een test gedaan op het model voordat het geoptimaliseerd werd, waarbij redudante structuren werden verwijderd. Deze test gaf een gevoeligheid en specificiteit van 0.01. Na het toepassen van het protocol voor het verwijderen van redundante genstructuren, nam de specificiteit toe met 0,3 tot 0,5 punten. ******* Evaluation of gene prediction ******* ---------------------------------------------\\ | sensitivity | specificity | ---------------------------------------------| nucleotide level | 0.942 | 0.762 | ---------------------------------------------/ ----------------------------------------------------------------------------------------------------------\\ | #pred | #anno | | FP = false pos. | FN = false neg. | | | | total/ | total/ | TP |--------------------|--------------------| sensitivity | specificity | | unique | unique | | part | ovlp | wrng | part | ovlp | wrng | | | ----------------------------------------------------------------------------------------------------------| | | | | 1071 | 767 | | | exon level | 1884 | 1580 | 813 | ------------------ | ------------------ | 0.515 | 0.432 | | 1884 | 1580 | | 436 | 104 | 531 | 456 | 145 | 166 | | | ----------------------------------------------------------------------------------------------------------/ ----------------------------------------------------------------------------\\ transcript | #pred | #anno | TP | FP | FN | sensitivity | specificity | ----------------------------------------------------------------------------| gene level | 454 | 373 | 88 | 366 | 285 | 0.236 | 0.194 | ----------------------------------------------------------------------------/ Zie lumbricus/protocol2/test/test.out voor meer informatie. 4.10 Prediction met behulp van extrinsiek bewijs (Protocol 11-12) Voor de extrinistiek Hints is proteoom van wormen geselecteerd. Het proteoom komt van UniProt, dat zowel het proteoom van Lumbricus Terrestris als dat van Eisenia Fetida omvat. Twee van de Fasta-bestanden die we van UniProt hebben gekregen, zijn in één bestand samengevoegd. Proteome Lumbcricus Terrestris: https://www.uniprot.org/uniprotkb?query=%28taxonomy_id%3A6397%29 Proteome Eisenia Fetida: https://www.uniprot.org/uniprotkb?query=%28taxonomy_id%3A6393%29 Samengevat Lumbricus en Eisenia: lumbcricus -&gt; protocl12 -&gt; data_processing -&gt; merged_6393_and_6397.fa Fasta files, afkomstig van Uniprot: Eisienia: lumbricus -&gt; protocl12 -&gt; data_raw-&gt; uniprotkb_taxonomy_id_6393_2024_12_29.fasta Lumbricus : lumbricus -&gt; protocl12 -&gt; data_raw-&gt; uniprotkb_taxonomy_id_6397_2024_12_29.fasta. Eerste step is de ProtHints: ../bin/prothint.py ../OX457036.1.fasta ../merged_6393_and_6397.fa Het programma ProtHints wordt gebruikt om hints voor te bereiden (ProtHints installatie vond plaats in protocol 2). In deze fase wordt het bestand prothint_augustus.gff aangemaakt. Voorbeeld prothint_augustus.gff : OX457036.1 ProtHint start 33409650 33409652 2 - 0 src=P;mult=2;pri=4;al_score=0.433058; OX457036.1 ProtHint intron 34198705 34199175 2 + . src=P;mult=2;pri=4;al_score=0.38446; OX457036.1 ProtHint intron 34199278 34199565 2 + . src=P;mult=2;pri=4;al_score=0.26901; OX457036.1 ProtHint intron 37878497 37880236 2 + . src=P;mult=1;pri=4;al_score=0.488541; OX457036.1 ProtHint intron 37880480 37881139 2 + . src=P;mult=1;pri=4;al_score=0.474112; OX457036.1 ProtHint stop 37881166 37881168 2 + 0 src=P;mult=1;pri=4;al_score=0.429752; Je kunt hints gelijk toepassen in augustus. augustus --species=caenorhabditis --predictionStart=2000000 --predictionEnd=3000000\\ OX457036.1.fasta --extrinsicCfgFile=extrinsic.cfg --hintsfile=prothint_augustus.gff &gt; augustus.extrinistics.hints.gff For de extrinsic.cfg zee: https://github.com/nextgenusfs/augustus/blob/master/config/extrinsic/cgp.extrinsic.cfg Voorbeeld extrinsic.cfg: # source of extrinsic information: # M manual anchor (required) # P protein database hit # E EST/cDNA database hit # C combined est/protein database hit # D Dialign # R retroposed genes # T transMapped refSeqs # W wiggle track coverage info from RNA-Seq [SOURCES] M RM E W P # # individual_liability: Only unsatisfiable hints are disregarded. By default this flag is not set # and the whole hint group is disregarded when one hint in it is unsatisfiable. # 1group1gene: Try to predict a single gene that covers all hints of a given group. This is relevant for # hint groups with gaps, e.g. when two ESTs, say 5&#39; and 3&#39;, from the same clone align nearby. # [SOURCE-PARAMETERS] # feature bonus malus gradelevelcolumns # r+/r- # # the gradelevel colums have the following format for each source # sourcecharacter numscoreclasses boundary ... boundary gradequot ... gradequot # [GENERAL] start 1 0.8 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1e3 stop 1 0.8 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1e3 tss 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 tts 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 ass 1 0.95 0.1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 100 dss 1 0.95 0.1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 100 exonpart 1 .992 .985 M 1 1e+100 RM 1 1 E 1 1 W 1 1.02 P 1 1 exon 1 0.9 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1e4 intronpart 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 intron 1 .34 M 1 1e+100 RM 1 1 E 1 1e6 W 1 1 P 1 100 CDSpart 1 1 .985 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1e5 CDS 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 UTRpart 1 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 UTR 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 irpart 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 nonexonpart 1 1 M 1 1e+100 RM 1 1.15 E 1 1 W 1 1 P 1 1 genicpart 1 1 M 1 1e+100 RM 1 1 E 1 1 W 1 1 P 1 1 Tijdens deze stap wordt er een gff-annotatiebestand geproduceerd. Voorbeeld Augustus gff van protein Hints: # start gene g10 OX457036.1 AUGUSTUS gene 2072765 2073299 0.59 + . g10 OX457036.1 AUGUSTUS transcript 2072765 2073299 0.59 + . g10.t1 OX457036.1 AUGUSTUS tss 2072765 2072765 . + . transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS 5&#39;-UTR 2072765 2072799 0.99 + . transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS start_codon 2072800 2072802 . + 0 transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS single 2072800 2073033 0.93 + 0 transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS CDS 2072800 2073033 0.93 + 0 transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS stop_codon 2073031 2073033 . + 0 transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS 3&#39;-UTR 2073034 2073299 0.6 + . transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; OX457036.1 AUGUSTUS tts 2073299 2073299 . + . transcript_id &quot;g10.t1&quot;; gene_id &quot;g10&quot;; # protein sequence = [MYKLVDETSKLAWLLCLMRMLSQKYYVSSMLMLANSRASLLPLLIAYNELISRDDELSCYRFLHSCDMFILTFFRRS] # Evidence for and against this transcript: # % of transcript supported by hints (any source): 0 # CDS exons: 0/1 # CDS introns: 0/0 # 5&#39;UTR exons and introns: 0/1 # 3&#39;UTR exons and introns: 0/1 # hint groups fully obeyed: 0 # incompatible hint groups: 0 # end gene g10 De gff die we van deze pipeline hebben ontvangen, is hier te vinden: lumbricus/protocol12/gff 4.11 Identificatie en visualisatie 4.12 Gen-identificatie Alle voorspellingen zijn gebaseerd op een DNA-fragment van 1 mb, wat overeenkomt met 1% van chromosoom. De exacte locatie is aangeduid als 2000000-3000000. (2-3 mb) van chr1. De predictor is toegepast op het nieuwe lumtermodel (zie, protocol 1, model) dat in deel 1 is ontwikkeld. Alle stappen voor identificatie zijn vastgelegd in prediction.xlsx (map identification). augustus --species=lumter lumter.fasta --predictionStart=2000000 --predictionEnd=3000000 --gff3=on Voor het identificeren van genen hebben we de qblast() functie gebruikt uit de Bio.Blast.NCBIWWW module van Biopython. De qblast functie heeft verschillende opties die vergelijkbaar zijn met de parameters die je kunt instellen op de BLAST webpagina. Wij hebben nucleotide blast (“blastn”, “nt”) gebruikt. Deze functie is bedoeld om nucleotidesequenties te vinden die vergelijkbaar zijn met die van andere organismen, en deze gegevens zijn beschikbaar in de NCBI-database. Hulp voor de qblast functie: from Bio.Blast import NCBIWWW help(NCBIWWW.qblast) Some useful parameters: - program blastn, blastp, blastx, tblastn, or tblastx (lower case) - database Which database to search against (e.g. &quot;nr&quot;). - sequence The sequence to search. - ncbi_gi TRUE/FALSE whether to give &#39;gi&#39; identifier. - descriptions Number of descriptions to show. Def 500. - alignments Number of alignments to show. Def 500. - expect An expect value cutoff. Def 10.0. - matrix_name Specify an alt. matrix (PAM30, PAM70, BLOSUM80, BLOSUM45). - filter &quot;none&quot; turns off filtering. Default no filtering - format_type &quot;HTML&quot;, &quot;Text&quot;, &quot;ASN.1&quot;, or &quot;XML&quot;. Def. &quot;XML&quot;. - entrez_query Entrez query to limit Blast search - hitlist_size Number of hits to return. Default 50 - megablast TRUE/FALSE whether to use MEga BLAST algorithm (blastn only) - short_query TRUE/FALSE whether to adjust the search parameters for a short query sequence. Note that this will override manually set parameters like word size and e value. Turns off when sequence length is &gt; 30 residues. Default: None. - service plain, psi, phi, rpsblast, megablast (lower case) This function does no checking of the validity of the parameters and passes the values to the server as is. More help is available at: https://ncbi.github.io/blast-cloud/dev/api.html &lt;/p&gt; Eerst hebben we het ruwe GFF-bestand voorbereid voor de Blast API door alle spaties en het ‘#’ symbool te verwijderen. Om de gencoördinaten te krijgen, maakten we gebruik van een regex-patroon. pattern_a = r&#39;gene.*\\s+(OX457036.*AUGUSTUS\\sgene.*g\\d+)&#39; Voor het ophalen van de coderingssequentie uit het GFF-bestand maakten we gebruik van een andere regex. pattern_b = r&quot;coding sequence =.*[actg\\s\\]]{1,}&quot;. Nadat je het GFF-bestand hebt geparsed, is het klaar voor gebruik met de Blast API. Elke coderingssequentie heeft een unieke identificatie die de start- en eindcoördinaten bevat: genomisch OX457036.1:2000789-2003917 Voor meer details kun je de scripts bekijken, vooral parsegtf.py, deel identification. head lumbricus/identification/prediciton/genome.fa.gff ## &gt;genomic OX457036.1:2000789-2003917 ## atggaggagtctaggccagtcactcccgctcagccttctaggcccccttcttctatggagatattgctcgaggcaatac ## aaactaatgctaggtccactcatgaagcaatacagactaacgctaagtcttcacaagaggctatgcaagcgcatgctaagtcaactcatgatgctatg ## acttctatacagtcgtctttgcaactgaatgccagagagacgcaagaggcgattgccacggtggagtttaatgtcctggcagtgcaatcaaatgttag ## cgaagctatttcctcagtgcaatcaaatgtaagagaggagataagagaagagatctcggctgtaagagataatgtcagggaagcgctgacggaaatgg ## tatcacgattggaaaggctagaggcgtcgccggtacccaagcctgctgtggattcgaaccctggttacctcaccgctattacccctgcggacgcgcca ## taccactcgaccatcggcctgggggaaactttgggtgctaggcctaaagatttcacgcaacctggtatattgcggagaagtgatagattggctggtag ## gccgccaatttcatatagggagtacggtagtcgaaaagactggccgcctttcctgggttgggattcgaacccagaagtcacctcctcctgtcctccct ## ctatctctagagctcgtccacagcagcacgcggtcccatcaggcgaggatccggaagtggcgactccggggatgccgataggggcgggcgttacaatt ## ggtcccagccagtggggtcaaattagttctagagattttggtgatgataggttagaagaggaaactgactatgctagaacaggcgaaatggcaatttc De blast-query’s via Bio.Blast.NCBIWWW.qblast zijn uitgevoerd en de resultaten zijn teruggegeven in XML-formaat (voor meer informatie, zie: blast.py). from Bio.Blast import NCBIWWW from Bio.Blast import NCBIXML genomic=&quot;genome.fa&quot; sequence_data = open(genomic).read() sequence_data result_handle = NCBIWWW.qblast(&quot;blastn&quot;, &quot;nt&quot;, sequence_data, hitlist_size=5, alignments=50) with open(&#39;reults.xml&#39;, &#39;w&#39;) as save_file: blast_results = result_handle.read() save_file.write(blast_results) Voor de blast-analyse is het bestand genome.fa opgedeeld in drie verschillende fracties, wat resulteerde in 3 xml-bestanden (identificatie-&gt;xml). Elke DNA-sequentie die je invoert in nucleotide BLAST krijgt een bepaald aantal hits, en het geeft ook wat statistieken over die hits. Een voorbeeld van een hit: . &lt;Iteration_hits&gt; &lt;Hit&gt; &lt;Hit_num&gt;1&lt;/Hit_num&gt; &lt;Hit_id&gt;gi|11071239|emb|AJ299434.1|&lt;/Hit_id&gt; &lt;Hit_def&gt;Lumbricus rubellus mt2A gene for metallothionein 2A, exons 1-4&lt;/Hit_def&gt; &lt;Hit_accession&gt;AJ299434&lt;/Hit_accession&gt; &lt;Hit_len&gt;7302&lt;/Hit_len&gt; &lt;Hit_hsps&gt; &lt;Hsp&gt; &lt;Hsp_num&gt;1&lt;/Hsp_num&gt; &lt;Hsp_bit-score&gt;85.143&lt;/Hsp_bit-score&gt; &lt;Hsp_score&gt;93&lt;/Hsp_score&gt; &lt;Hsp_evalue&gt;7.19655e-12&lt;/Hsp_evalue&gt; &lt;Hsp_query-from&gt;70&lt;/Hsp_query-from&gt; &lt;Hsp_query-to&gt;246&lt;/Hsp_query-to&gt; &lt;Hsp_hit-from&gt;306&lt;/Hsp_hit-from&gt; &lt;Hsp_hit-to&gt;490&lt;/Hsp_hit-to&gt; &lt;Hsp_query-frame&gt;1&lt;/Hsp_query-frame&gt; &lt;Hsp_hit-frame&gt;1&lt;/Hsp_hit-frame&gt; &lt;Hsp_identity&gt;131&lt;/Hsp_identity&gt; &lt;Hsp_positive&gt;131&lt;/Hsp_positive&gt; &lt;Hsp_gaps&gt;8&lt;/Hsp_gaps&gt; &lt;Hsp_align-len&gt;185&lt;/Hsp_align-len&gt; &lt;Hsp_qseq&gt;AGATTGAACATCAAACAGGATATAGTTGACAAAGTGCGGAATAGAAGAATGCGATACTTTGGACATGTGA------CAAGAATGGGGAACGAAATATATCCAAAGATAGGC-TCAACGGATATGTACATGGGAAAAGATCAAGGGGA-GACCAAAGAAAAGATGGATCGACACGATAAGAGATGA&lt;/Hsp_qseq&gt; &lt;Hsp_hseq&gt;AGACTGAATATTCAACATGATATAATACACAAGATCCAAAGTAAACGACTACGCTACTTTGGCCACGTATATATATCCAGAATGAGGGATGAGAGATACCCGAAGGTAGCTGTCAACGGATATGTGCATGGAAAAAGAAAAAAAGGAAGACCAAAGAAGAGATGGGTCGACATGATACGTGAGGA&lt;/Hsp_hseq&gt; &lt;Hsp_midline&gt;||| |||| || |||| |||||| | |||| | | | || | || | || |||||||| || || | |||||| || | || | ||| || ||| ||| ||||||||||||| ||||| |||||| || ||| |||||||||| |||||| |||||| |||| | || ||&lt;/Hsp_midline&gt; &lt;/Hsp&gt; &lt;/Hit_hsps&gt; &lt;/Hit&gt; De XML-resultaten van de blast-uitvoer laten zien hoe goed de Alignment overeenkomt, samen met de eval-waarde. De gevonden Hits worden bewaard met het NCBI-referentienummer, zoals “ref XM_003731435.1”, of het Ensemble-referentienummer, zoals “emb OE003277.1”. Zodra je de XML-resultaten hebt, is de eerste stap om ze te parseren. De XML-resultaten zijn geparsed en gesorteerd op coördinaten en e-waarde (sort-blast-by-coords.py, sort-blast-by-pval.py). import os cwd = os.getcwd() print(cwd) import sys from Bio.Blast import NCBIXML OUT = open(&quot;sorted_by_coordinates.fraction3.txt&quot;, &#39;w&#39;) OUT.write(&quot;Query Name\\tQuery Length\\tAlignment ID NCBI\\teValue\\n&quot;) result_handle = open(&quot;blast.results.fraction3.xml&quot;) blast_records = NCBIXML.parse(result_handle) for rec in blast_records: for alignment in rec.alignments: for hsp in alignment.hsps: fields = [rec.query_id, rec.query[:100], str(rec.query_length), alignment.hit_id, alignment.accession, str(hsp.expect)] OUT.write(&quot;\\t&quot;.join(fields) + &quot;\\n&quot;) OUT.close() print(&#39;Done&#39;) sorted_by_coordinate &lt;- read_excel(&quot;lumbricus/identification/prediction.xlsx&quot;, sheet = 6 ) sorted_by_p &lt;- read_excel(&quot;lumbricus/identification/prediction.xlsx&quot;, sheet = 5 ) # sorted by coordinates head(sorted_by_coordinate ) ## # A tibble: 6 × 6 ## `Query Name` `Query Length` `Alignment ID NCBI` eValue Column1 `_1` ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Query_1234140 genomic OX457036.1:2… 459 gi|26… XM_063… 6.18e-5 ## 2 Query_1234140 genomic OX457036.1:2… 459 gi|26… XM_063… 3.20e-2 ## 3 Query_1234140 genomic OX457036.1:2… 459 gi|26… XM_062… 4.75e-1 ## 4 Query_1234140 genomic OX457036.1:2… 459 gi|26… XM_062… 4.75e-1 ## 5 Query_1234140 genomic OX457036.1:2… 459 gi|26… XM_062… 4.75e-1 ## 6 Query_1234141 genomic OX457036.1:2… 408 gi|28… OZ0783… 4.46e-6 # sorted by p-val head(sorted_by_p) ## # A tibble: 6 × 2 ## Column1 Column2 ## &lt;chr&gt; &lt;chr&gt; ## 1 &lt;NA&gt; &lt;NA&gt; ## 2 query: genomic OX457036.1:2108840-2109808 ## 3 match: gi|2739567124|gb|CP157508.1| Candidozyma auris strain BA03 chromosome… ## 4 query: genomic OX457036.1:2108840-2109808 ## 5 match: gi|2739567124|gb|CP157508.1| Candidozyma auris strain BA03 chromosome… ## 6 query: genomic OX457036.1:2108840-2109808 Eerst moeten we naar alle voorspellingen kijken, ook naar de voorspellingen met ongunstige eval-waarden (vergelijkbaar met p-waarden). Alle voorspellingen: . all_predictions &lt;- read_excel(&quot;lumbricus/identification/prediction.xlsx&quot;, sheet = 1 ) all_predictions ## # A tibble: 89 × 5 ## `OX457036.1:2000789-2003917` AUGUSTUS gene predicted:not satisfac…¹ `185403` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 OX457036.1:2007959-2008723 AUGUSTUS gene predicted:not satisfact… 1852 ## 2 OX457036.1:2039309-2039692 AUGUSTUS gene predicted:not satisfact… 881419 ## 3 OX457036.1:2062296-2062562 AUGUSTUS gene predicted:not satisfact… 0 ## 4 OX457036.1:2087020-2087265 AUGUSTUS gene predicted: Lumbricus ru… 7.38114… ## 5 OX457036.1:2089471-2089899 AUGUSTUS gene predicted:Lampetra plan… 8.69409… ## 6 OX457036.1:2090721-2091137 AUGUSTUS gene predicted:not satisfact… 965729 ## 7 OX457036.1:2106048-210639 AUGUSTUS gene predicted:Mus musculus … 6.12276… ## 8 OX457036.1:2106538-2106948 AUGUSTUS gene predicted:not satisfact… 640374 ## 9 OX457036.1:2107471-2108487 AUGUSTUS gene predicted:not satisfact… 3.24628… ## 10 OX457036.1:2108840-2109808 AUGUSTUS gene predicted: Candidozyma … 1.27857… ## # ℹ 79 more rows ## # ℹ abbreviated name: ¹​`predicted:not satisfactory p-value` In deze fase hadden we voorspellingen( Hits) voor 92 genen op een 1mb chromosoom (tussen 2mb en 3mb), zelfs met enkele genen die niet zo’n goede eval-waarden hadden. colnames(all_predictions ) &lt;- c(&quot;id&quot;,&quot;source&quot;,&quot;feature&quot;, &quot;predicted&quot;, &quot;eval&quot;) all_predictions $eval &lt;- parse_number(all_predictions $eval) df.f.pavlue &lt;- all_predictions %&gt;% filter(eval&lt;= 1e-4) %&gt;% filter(eval!=0) head(df.f.pavlue) ## # A tibble: 6 × 5 ## id source feature predicted eval ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 OX457036.1:2087020-2087265 AUGUSTUS gene predicted: Lumbricus rub… 7.38e- 7 ## 2 OX457036.1:2089471-2089899 AUGUSTUS gene predicted:Lampetra plane… 8.69e-99 ## 3 OX457036.1:2106048-210639 AUGUSTUS gene predicted:Mus musculus c… 6.12e-10 ## 4 OX457036.1:2108840-2109808 AUGUSTUS gene predicted: Candidozyma a… 1.28e-22 ## 5 OX457036.1:2108840-2109808 AUGUSTUS gene predictied: Phaeodactylu… 2.82e-13 ## 6 OX457036.1:2112894-2113442 AUGUSTUS gene predicted: Ixodes scapu… 1.27e-14 write.table( df.f.pavlue, + &quot;lumbricus/identification/prediction/df.filtered.txt&quot;,sep=&quot;\\t&quot;) predictions &lt;-read.table(&quot;lumbricus/identification/prediciton/df.filtered.txt&quot;) In de daaropvolgende fase hebben we een eval, evaluatiedrempel van 1e-4 ingesteld, wat redelijk mild is.Na het filteren van de voorspellingen met ongunstige eval-waarden, hebben we 32 voorspellingen gevonden die betrekking hebben op 32 genen voor een 1 Mb segment van het eerste chromosoom, wat 1% van het totale chromosoom is. De uiteindelijke voorspelling voor het fragment dat we onderzoeken, is als volgt. predicition: table7 &lt;- predictions %&gt;% select(V7) table7 %&gt;% kable(&quot;html&quot;) %&gt;% kable_styling(font_size = 7) V7 predicted: Lumbricus rubellus mt2A gene for metallothionein 2A, exons 1-4;AJ299434.1; predicted:Lampetra planeri genome assembly, chromosome: 62; emb OZ078387.2 predicted:Mus musculus chromosome 8, clone RP23-339I14, complete sequence;AC121136.11 predicted: Candidozyma auris strain BA03 chromosome; 1 eval; CP157508.1 predictied: Phaeodactylum tricornutum CCAP 1055/1 predicted protein partial mRN;XM_002176960.1 predicted: Ixodes scapularis G-protein coupled receptor dmsr; XM_029969893.4 predicted :Melanogrammus aeglefinus genome assembly, chromosome: 10; emb OZ180142.1 predicted : Earthworm (L.terrestris) extracellular globin chain c gene, complete cds; gb J05161.1 LUMHBC predicted:Zymobacter palmae IAM14233 DNA, complete genome;dbj|AP018933.1 predicted: Hylaeus volcanicus uncharacterized LOC128877144 (LOC128877144), transcript variant X5, mRNA;XM_054124195.1 predicted:Mus musculus BAC clone RP23-95F15 from chromosome 1, complete sequence;AC165443.5 predicted:4_Tte_b3v08;emb|OE003277.1 predicted:Earthworm (L.terrestris) extracellular globin chain c gene, complete cds;J05161.1 LUMHBC predicted: XM_009033761.1| Helobdella robusta hypothetical protein mRNA predicted:XM_069820523.1| PREDICTED: Periplaneta americana carbonic anhydrase beta (CAHbeta), transcript variant X3, mRNA preddicted:Loxodonta africana zinc finger protein 252-like (LOC100666328), transcript variant X4, mRNA predicted:gb|KX592814.1| Bos taurus isolate Dominette_000065F genomic sequence predicted: gb|J05161.1|LUMHBC Earthworm (L.terrestris) extracellular globin chain c gene, complete cds predicted:ref|XM_637462.1| Dictyostelium discoideum AX4 hypothetical protein (DDB_G0277655) mRNA, complete cds predicted:Rattus norvegicus uncharacterized LOC134482949 (LOC134482949), ncRNA Melanogrammus aeglefinus genome assembly, chromosome: 13 predicted:PREDICTED: Portunus trituberculatus putative uncharacterized protein DDB_G0271982 (LOC123514901), partial mRNA predicted:emb|LN021320.1| Spirometra erinaceieuropaei genome assembly S_erinaceieuropaei ,scaffold SPER_scaffold0020968 predicted: gb|L12688.1|LUMBT Earthworm DNA sequence prediction:emb|OZ078459.1| Lampetra fluviatilis genome assembly, chromosome: 56 emb|OZ180149.1| Melanogrammus aeglefinus genome assembly, chromosome: 17 predicted: ef|NC_043824.1|;Passiflora obovata chloroplast, complete genome;gb|MK694931.1| predicted:ref|XM_005559078.4;Macaca fascicularis piggyBac transposable element derived 4 (PGBD4), mRNA predicted:emb|OE179951.1| 2_Tcm_b3v08 predicted:emb;BX544872.8;Zebrafish DNA sequence from clone DKEY-58L12 in linkage group 3, complete sequence predicted:XM_023356947.1;Centruroides sculpturatus uncharacterized LOC111615539 (LOC111615539), mRNA predicted:XM_066083420.1| PREDICTED: Magallana gigas retrovirus-related Pol polyprotein from transposon 412 (LOC105343682), mRNA For more details,see Voor meer informatie, kijk in de map identification, prediction.xlsx, sheet “df_fitlered”. 4.13 Visualisatie 4.14 GenViz Voor het voorbereiden van de data kun je de volgende bestanden bekijken: genviz-features.py, map visualisatie en GenomeViz. De genen die zijn gevonden, worden weergegeven in grafieken, met speciale aandacht voor de eerste 2-3 megabases van chromosoom 1 (coördinaten 2000000-3000000). Om te scrollen door de features, kun je de webversie gebruiken: https://alenagrrr3.github.io/2-3mb-terrsetris/ De totale representatie van het chromosoom /OX457036.1. https://alenagrrr3.github.io/OX457036.1.html/ 4.15 JBrowse Het gen met de coördinaten OX457036.1:2,087,020 - 2,090,258 is geïdentificeerd als het mt2A-gen voor metallothioneïne 2A van Lumbricus rubellus, inclusief exons 1-4; AJ299434.1. is onderzocht in de in Jbrowser (JBrowse | JBrowse, n.d.) Gene 5, with intron, Cds, and transctipt: To zoom in, you can ues the link: https://raw.githubusercontent.com/alenagrrr3/OX457036.1.html/refs/heads/main/lumterAM182481.1-gene5.svg 4.16 Artemis gen &quot;g5&quot; (OX457036.1:2,087,020 - 2,090,258 ) in Artemis Browser met startcodon en CDS (minus streng): To zoom in, you can ues the link: https://raw.githubusercontent.com/alenagrrr3/OX457036.1.html/refs/heads/main/artemis-g5-startcodon.webp 4.17 Bijlage Map struture: fs::dir_tree(&quot;lumbricus&quot;) ## lumbricus ## ├── bib ## ├── DESCRIPTION ## ├── docs ## │ ├── docs.pdf ## │ ├── pva_feedback.v.1.0_lajsa_alena_merged.docx ## │ ├── PVA_Regenwormproject.html ## │ └── PVA_regenwormproject.Rmd ## ├── identification ## │ ├── gff ## │ │ └── lumter2-3mb.gff3 ## │ ├── prediciton ## │ │ ├── df.filtered.txt ## │ │ └── genome.fa.gff ## │ ├── prediction.xlsx ## │ ├── scripts ## │ │ ├── blast.py ## │ │ ├── parsegtf.py ## │ │ ├── soort-blast-by-coords.py ## │ │ └── sort-blast-by-pval.py ## │ └── xml ## │ ├── blast.results.fraction2.xml ## │ ├── blast.results.fraction3.xml ## │ └── results.fraction1.xml ## ├── lumbricus.Rproj ## ├── NAMESPACE ## ├── protocol1 ## │ ├── data_processing ## │ │ ├── bonafide ## │ │ │ ├── bonafide.gb ## │ │ │ ├── bonafide.gb.test ## │ │ │ ├── bonafide.gb.train ## │ │ │ ├── bonafide.unique.gb ## │ │ │ ├── etrain.out ## │ │ │ └── test.out ## │ │ ├── GeneMarkES ## │ │ │ ├── genemark.average_gene_length.out ## │ │ │ ├── genemark.f.good.gtf ## │ │ │ ├── genemark.gtf ## │ │ │ └── hmm.model ## │ │ │ └── gmhmm.mod ## │ │ └── TOPHAT ## │ │ ├── accepted_hits.bam ## │ │ ├── align_summary.txt ## │ │ ├── igv ## │ │ │ ├── exon-intron.png ## │ │ │ ├── exon-introns.svg ## │ │ │ ├── exontranscripts.png ## │ │ │ ├── exon_ids.bed ## │ │ │ ├── igv_snapshot.svg ## │ │ │ ├── igv_snapshot_bed_vs_juncions.png ## │ │ │ ├── junction_vs_bam_10kb.png ## │ │ │ ├── junction_vs_bam_11kb.png ## │ │ │ ├── junction_vs_bam_11kb2.png ## │ │ │ ├── junction_vs_bam_2.8.bp.png ## │ │ │ └── transctipts_ids.bed ## │ │ ├── introns.gff ## │ │ ├── introns_by_gmh_with_gtf.gff ## │ │ ├── junctions.bed ## │ │ └── transcripts.gtf ## │ ├── model ## │ │ └── wormET0 ## │ │ ├── wormET0_exon_probs.pbl ## │ │ ├── wormET0_igenic_probs.pbl ## │ │ ├── wormET0_intron_probs.pbl ## │ │ ├── wormET0_metapars.cfg ## │ │ ├── wormET0_metapars.cgp.cfg ## │ │ ├── wormET0_metapars.utr.cfg ## │ │ ├── wormET0_parameters.cfg ## │ │ └── wormET0_weightmatrix.txt ## │ ├── refs ## │ │ ├── README.GeneMark-ET ## │ │ └── refs ## │ ├── scrips ## │ │ ├── bed_to_gff.pl ## │ │ ├── filterGenemark.pl ## │ │ ├── step1.sh ## │ │ ├── step2.sh ## │ │ ├── step3.sh ## │ │ ├── step4.sh ## │ │ └── step5.sh ## │ └── test ## │ └── eval.png ## ├── protocol2 ## │ ├── data_processing ## │ │ ├── bad-list ## │ │ │ ├── bad.list ## │ │ │ ├── bad.pre.list ## │ │ │ ├── bonafide.f.nonred.gb ## │ │ │ └── inseq ## │ │ ├── Bonafid ## │ │ │ ├── bonafide.gb ## │ │ │ ├── bonafide.gtf ## │ │ │ └── etrain.out ## │ │ ├── ProtHints ## │ │ │ ├── augustus.hints.prots.orthodb.arthropoda.2-3mb.gff ## │ │ │ ├── extrinsic.cfg ## │ │ │ ├── gth.concat.aln ## │ │ │ ├── prothint.gff ## │ │ │ ├── prothint_augustus.gff ## │ │ │ ├── run.cfg ## │ │ │ └── seed_proteins.faa ## │ │ └── Redundancy ## │ │ ├── bonafide.f.gb ## │ │ ├── bonafide.f.gtf ## │ │ ├── bonafide.f.nonred.gb ## │ │ ├── loci.lst ## │ │ ├── nonred.loci.lst ## │ │ ├── nonred.lst ## │ │ ├── prot.aa ## │ │ ├── prot.nr.aa ## │ │ └── traingenes.lst ## │ ├── data_raw ## │ │ └── transcriptome.refs ## │ ├── filter ## │ │ ├── before.png ## │ │ ├── bonafide.filtered.nonred.gb ## │ │ ├── export.hist.on.wormEP ## │ │ ├── filtered.gb ## │ │ ├── filterGenes.pl ## │ │ ├── prot.out.png ## │ │ └── test.out ## │ ├── model ## │ │ └── wormNonredEP ## │ │ ├── wormNonredEP_exon_probs.pbl ## │ │ ├── wormNonredEP_igenic_probs.pbl ## │ │ ├── wormNonredEP_intron_probs.pbl ## │ │ ├── wormNonredEP_metapars.cfg ## │ │ ├── wormNonredEP_metapars.cgp.cfg ## │ │ ├── wormNonredEP_metapars.utr.cfg ## │ │ ├── wormNonredEP_parameters.cfg ## │ │ └── wormNonredEP_weightmatrix.txt ## │ ├── refs ## │ │ └── refs ## │ ├── resources ## │ │ └── ncbi-blast-2.16.0+ ## │ │ ├── bin ## │ │ │ ├── blastn_vdb ## │ │ │ ├── blastp ## │ │ │ ├── blast_vdb_cmd ## │ │ │ ├── makeprofiledb ## │ │ │ └── rpsblast ## │ │ └── ChangeLog ## │ └── scripts ## │ ├── bonafide.nonred.f.py ## │ ├── createbonafidef.py ## │ ├── create_train_list.py ## │ ├── locilst.py ## │ ├── nonred.loci.py ## │ ├── step1.sh ## │ ├── step2.sh ## │ └── step3.sh ## └── visualization ## ├── artemis ## │ ├── artemis-g5.png ## │ └── lumter.artemis.track.gff3 ## ├── GenomeViz ## │ ├── custom_bopython-feature.png ## │ ├── genviz-features.py ## │ ├── index.html ## │ └── terr.png ## └── jbrowser ## ├── 2087020.png ## ├── cds.png ## ├── intron.png ## ├── start_codon.png ## └── transcript1.png 4.18 References "],["differential-gene-expression.html", "Chapter 5 Differential gene expression", " Chapter 5 Differential gene expression library(Rsubread) library(tidyverse) Introduction Our goal is to see if the transcription factor ONECUT1 is a transcription factor(TF) that will be able to turn fibroblast cells into brain cells. We will be doing this by researching the difference in gen expression between fibroblast treated with TF ONECUT1 and the control TF BCLXL. The RNA-sequencing was performed with Illumina NextSeq 500 using HighOutput kit v2 for 75 cycles. It was paired-end sequencing 2 × 43 bp. The dataset was generated using a stranded-protocol. The cells used were fibroblasts from a human female at the age of 29. The fibroblasts lines were cultured in tissue culture flasks in Dulbecco’s modified Eagle’s medium containing 20% (vol/vol) fetal bovine serum, 1% (vol/vol) penicillin/streptomycin and 1% (vol/vol) sodium pyruvate. Information from:(https://academic.oup.com/nar/article/47/11/5587/5485068?login=false) Q score estimation library(png) library(grid) library(gridExtra) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine img2 &lt;- rasterGrob(as.raster(readPNG(&quot;assets/img/SRR7866699_1_Per base sequence quality.png&quot;))) img3 &lt;- rasterGrob(as.raster(readPNG(&quot;assets/img/SRR7866699_2_Per base sequence quality.png&quot;))) top_annotation_Fig1 &lt;- textGrob(&quot;Overrepresented sequences from the forward read from SRR7866702&quot;, gp = gpar(fontsize = 10, font = 8)) bottom_annotation_Fig1 &lt;- textGrob(&quot;Fig. 1: The Overrepresented sequences of SRR7866702_1 which is shown because it&#39;s the only one to have a known possible source.&quot;, gp = gpar(fontsize = 7, font = 8)) top_annotation_Fig2 &lt;- textGrob(&quot;Per base sequence quality from the forward read(left) and reverse read(right) from SRR66699&quot;, gp = gpar(fontsize = 10, font = 8)) bottom_annotation_Fig2 &lt;- textGrob(&quot;Fig. 2: two graphs showing the per base sequence quality of SRR7866699_1(forward read) and SRR7866699_2(reverse read). Both have an average Phred score &gt; 30 which means the reads are of high quality. Of note is that not only in this figure but in all the fastqc&#39;s the forward reads have less variation in quality than the reverse reads.&quot;, gp = gpar(fontsize = 7, font = 8)) #grid.arrange(img1, top=top_annotation_Fig1, bottom=bottom_annotation_Fig1) grid.arrange(img2, img3, ncol = 2, top=top_annotation_Fig2, bottom=bottom_annotation_Fig2) Overall the per base sequence average phred score is always above 30. The per sequence phred score is mostly above 30. In the forward read from the fibroblast treated with ONECUT1(run id:SRR7866702) in the Overrepresented sequences there is a hit suggesting that there is a possible contamination due to the TruSeq Adapter trimming sequence. A noteworthy observation is that the from all the fastqc files the forward primers consistently have a higher average phred score, less variation in phred score and a bigger amount of Overrepresented sequences. overview raw bam file library(Rsubread) bam_dir=&quot;rnaseq_onecut/bam&quot; bam_files &lt;- list.files(bam_dir, pattern = &quot;(.70(0|1|2).*\\\\.bam$)|(.699\\\\.bam$)&quot;, full.names = TRUE) bam_files ## [1] &quot;rnaseq_onecut/bam/SRR7866699.bam&quot; &quot;rnaseq_onecut/bam/SRR7866700.bam&quot; ## [3] &quot;rnaseq_onecut/bam/SRR7866701.bam&quot; &quot;rnaseq_onecut/bam/SRR7866702.bam&quot; counts_dir &lt;- &quot;rnaseq_onecut/counts&quot; read_counts &lt;- featureCounts( files = bam_files, annot.inbuilt = &quot;hg38&quot;, useMetaFeatures = TRUE, strandSpecific = 0, isPairedEnd = TRUE, countReadPairs = TRUE, nthreads = 10 ) DESeqDataSetFromMatrix library(DESeq2) library(GOstats) library(GO.db) library(&quot;org.Hs.eg.db&quot;) alignment_stats_one &lt;- readRDS(file=&quot;rnaseq_onecut/bam/alignment_statistics.rds&quot;) rds_one &lt;- readRDS(&quot;rnaseq_onecut/counts/read_counts_OC1.rds&quot;) count_matrix_one &lt;- rds_one$counts metadata_one &lt;- read_csv(&quot;rnaseq_onecut/onecut_sampledata_OC1.csv&quot;) metadata_one &lt;- as.data.frame(metadata_one) rownames(metadata_one) &lt;- paste0(metadata_one$Run, &quot;.bam&quot;) colnames(count_matrix_one) == rownames(metadata_one) ## [1] TRUE TRUE TRUE TRUE metadata_one &lt;- metadata_one %&gt;% mutate(cond_factor = str_replace_all(Cell_type,c( &quot;Skin derived fibroblast overexpressing Bclxl&quot;=&quot;Bclxl&quot;, &quot;2 days after induction of OC1 in skin derived fibroblasts&quot;=&quot;OC1&quot;))) metadata_one$cond_factor &lt;- metadata_one$cond_factor %&gt;% factor(levels = c(&quot;Bclxl&quot;, &quot;OC1&quot;)) metadata_one$cond_factor ## [1] Bclxl Bclxl OC1 OC1 ## Levels: Bclxl OC1 dds_one &lt;- DESeqDataSetFromMatrix( countData = count_matrix_one, colData = metadata_one, design = ~ cond_factor ) dds_normalized_one &lt;- rlog(dds_one) pca_one &lt;- dds_normalized_one %&gt;% assay() %&gt;% t() %&gt;% prcomp() pca_one_summary &lt;- summary(pca_one)$importance pca_one_summary ## PC1 PC2 PC3 PC4 ## Standard deviation 38.44093 9.561226 7.233422 2.326055e-13 ## Proportion of Variance 0.91135 0.056380 0.032270 0.000000e+00 ## Cumulative Proportion 0.91135 0.967730 1.000000 1.000000e+00 PCA Plot pca_one_plotting &lt;- cbind(metadata_one, pca_one $x) PC1_one_var &lt;- round(pca_one_summary[&quot;Proportion of Variance&quot;, &quot;PC1&quot;]*100, digits = 1) PC2_one_var &lt;- round(pca_one_summary[&quot;Proportion of Variance&quot;, &quot;PC2&quot;]*100, digits = 1) pca_one_plotting &lt;- cbind(metadata_one, pca_one$x) pca_data &lt;- data.frame( name=c(&quot;PC1&quot;,&quot;PC2&quot;,&quot;PC3&quot;,&quot;PC4&quot;) , value=c(pca_one_summary[2,1]*100 ,pca_one_summary[2,2]*100 ,pca_one_summary[2,3]*100 ,pca_one_summary[2,4]*100 ) ) # Barplot ggplot(pca_data, aes(x=name, y=value, fill=name)) + geom_bar(stat = &quot;identity&quot;)+ labs(title=&quot;Variation percentage PC1 t/m PC4&quot;)+ xlab(&quot;PC1 t/m PC4&quot;)+ ylab(&quot;Variation percentage, %&quot;)+ geom_text(aes(label = value), vjust = -0.2) ggplot(pca_one_plotting) + geom_point(aes(x=PC1, y=PC2, color = cond_factor, shape = Cell_line), size = 5) + ggtitle(&quot;PCA for Bslxl study&quot;) + xlab(paste0(&quot;PC1 (&quot;, PC1_one_var, &quot;%)&quot;)) + ylab(paste0(&quot;PC2 (&quot;, PC2_one_var, &quot;%)&quot;)) + theme_bw() PC1 and PC2 capture 91.1+5.6% of all variation,which together is 96.7%. PC1 contains the most important variations. PC2 and PC3 are less important and PC4 has no significance. Most significant difference between cells is if they are treated with BCLXL or ONECUT1 seen along the PC1 axis. There is a slight difference between ONECUT1 cells along the PC2 axis, which refer to duplicate measurements. This observation is supported by a pheatmaps of activated genes, which also shows the light difference between duplo measurements in ONECUT1. The duplicate measurements of BCLXL are very close to each other along the PC2 axis and on the pheatmap. Volcano Ploting library(DESeq2) library(GO.db) library(tidyverse) dge_one &lt;- (DESeq(dds_one)) ## estimating size factors ## estimating dispersions ## gene-wise dispersion estimates ## mean-dispersion relationship ## final dispersion estimates ## fitting model and testing dge_results_one &lt;- results(dge_one) summary(dge_results_one) ## ## out of 20818 with nonzero total read count ## adjusted p-value &lt; 0.1 ## LFC &gt; 0 (up) : 4376, 21% ## LFC &lt; 0 (down) : 3883, 19% ## outliers [1] : 0, 0% ## low counts [2] : 3959, 19% ## (mean count &lt; 2) ## [1] see &#39;cooksCutoff&#39; argument of ?results ## [2] see &#39;independentFiltering&#39; argument of ?results results_without_na_one &lt;- data.frame(dge_results_one) %&gt;% filter(!is.na(padj)) sign_genes &lt;- results_without_na_one[which(results_without_na_one$padj &lt; 0.01),] topGene &lt;- sign_genes[which.max(sign_genes$log2FoldChange),] topGene_name &lt;- rownames(topGene) dge_plotting &lt;- results_without_na_one %&gt;% mutate(signif = if_else(padj &lt; 0.01, &quot;padj &lt; 0.01&quot;, &quot;Not significant&quot;)) dge_plotting$diffexpressed &lt;- &quot;NO&quot; dge_plotting$diffexpressed[dge_plotting$log2FoldChange &gt; 1 &amp; dge_plotting$pval &lt; 0.01] &lt;- &quot;UP&quot; dge_plotting$diffexpressed[dge_plotting$log2FoldChange &lt; -1 &amp; dge_plotting$pval &lt; 0.01] &lt;- &quot;DOWN&quot; upreg &lt;- sum(dge_plotting$diffexpressed==&quot;UP&quot;) down &lt;- sum(dge_plotting$diffexpressed==&quot;DOWN&quot;) notreg &lt;- sum(dge_plotting$diffexpressed==&quot;NO&quot;) dge_plotting$delabel &lt;- rownames(dge_plotting) dge_volcano &lt;- dge_plotting %&gt;% ggplot(aes(x = log2FoldChange, y = -log10(padj), color = diffexpressed)) + geom_point() + geom_hline(yintercept = -log10(0.01), col = &quot;gray&quot;, linetype = &#39;dashed&#39;)+ geom_vline(xintercept = c(-1, 1), col = &quot;gray&quot;, linetype = &#39;dashed&#39;) + coord_cartesian(ylim = c(0, 300), xlim = c(-10, 10)) + xlab(&quot;log2 fold change&quot;) + ylab(&quot;-log10 adjusted p-value&quot;) + theme_bw() + scale_color_manual(values = c( &quot;#00AFBB&quot;, &quot;grey&quot;, &quot;#bb0c00&quot;), labels=c( paste( &quot;Downregulated,&quot;, down) , paste(&quot;Not significant,&quot;, notreg) ,paste(&quot;Upregulated,&quot;, upreg)) ) dge_volcano Pheatmap ploting library(pheatmap) upreg_rows &lt;- dge_plotting[dge_plotting$diffexpressed==&quot;UP&quot;,] up_reg_genes &lt;- upreg_rows[order( upreg_rows$log2FoldChange,decreasing = TRUE),] top5_genes &lt;- rownames(up_reg_genes[order(up_reg_genes$log2FoldChange &amp; up_reg_genes$padj)[1:5],]) top5_genes ## [1] &quot;3175&quot; &quot;10202&quot; &quot;388228&quot; &quot;338440&quot; &quot;284422&quot; count_values_up &lt;- assay(dds_one)[top5_genes,] down_rows &lt;- dge_plotting[dge_plotting$diffexpressed==&quot;DOWN&quot;,] down_reg_genes &lt;- down_rows[order( down_rows$log2FoldChange),] top5_downereg_genes &lt;- rownames(down_reg_genes[order(down_reg_genes$log2FoldChange &amp; down_reg_genes$padj)[1:5],]) top5_downereg_genes ## [1] &quot;4973&quot; &quot;1734&quot; &quot;158584&quot; &quot;102724434&quot; &quot;285313&quot; top_5_up_and_5_down_genes &lt;- c(top5_genes,top5_downereg_genes) top_5_up_and_5_down_genes ## [1] &quot;3175&quot; &quot;10202&quot; &quot;388228&quot; &quot;338440&quot; &quot;284422&quot; &quot;4973&quot; ## [7] &quot;1734&quot; &quot;158584&quot; &quot;102724434&quot; &quot;285313&quot; count_values_up_and_down &lt;- assay(dds_one)[top_5_up_and_5_down_genes,] colnames(count_values_up_and_down) &lt;- colData(dds_one)$cond_factor geneSymbols &lt;- mapIds(org.Hs.eg.db, keys=rownames(count_values_up_and_down), column=&quot;SYMBOL&quot;, keytype=&quot;ENTREZID&quot;, multiVals=&quot;first&quot;) ## &#39;select()&#39; returned 1:1 mapping between keys and columns rownames(count_values_up_and_down) &lt;- geneSymbols pheatmap(count_values_up_and_down, scale = &quot;row&quot;, show_rownames = TRUE) Mapping with Ensemble DB map_ids &lt;- function(ids) { symbol &lt;- list() uniprot &lt;- list() ensemble&lt;- list() gen_ids &lt;- list() for (gen in ids) { geneSymbol &lt;- mapIds(org.Hs.eg.db, keys=gen, column=&quot;SYMBOL&quot;, keytype=&quot;ENTREZID&quot;, multiVals=&quot;first&quot;) symbols &lt;- unname(geneSymbol) ensembles &lt;- mapIds(org.Hs.eg.db, keys=geneSymbol, column=&quot;ENSEMBL&quot;, keytype=&quot;SYMBOL&quot;, multiVals=&quot;first&quot;) ensembles &lt;- unname(ensembles ) uniprots&lt;-mapIds(org.Hs.eg.db, keys=geneSymbol, column=&quot;UNIPROT&quot;, keytype=&quot;SYMBOL&quot;, multiVals=&quot;first&quot;) uniprots &lt;- unname(uniprots) ensemble[[length(ensemble)+1]] = ensembles gen_ids[[length(gen_ids)+1]] = gen symbol[[length(symbol)+1]]=symbols uniprot[[length(uniprot)+1]]=uniprots } df = data.frame(entrez=unlist(gen_ids), symbol=unlist(symbol),ensemble=unlist(ensemble), uniport=unlist(uniprot) ) %&gt;% as_tibble() #print(df) return(df) } ids &lt;- c(&quot;3175&quot;,&quot;10202&quot;, &quot;388228&quot; ) map_ids(ids) ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## &#39;select()&#39; returned 1:1 mapping between keys and columns ## # A tibble: 3 × 4 ## entrez symbol ensemble uniport ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 3175 ONECUT1 ENSG00000169856 Q9UBC0 ## 2 10202 DHRS2 ENSG00000100867 Q13268 ## 3 388228 SBK1 ENSG00000188322 Q52WX2 Go stats analyse Function calling for upregulated genes go_analyes_function (dge_results_one, 1) Function calling for downregulated genes go_analyes_function (dge_results_one, 0) Conclusion Treatment with ONECUT induces reprogramming of fibroblasts into neurons and expression of neuronal genes, regulates DNA transcription, synthesis of RNA and transcription by RNA polymerase II. ONECUT1 and BCLXL have antagonistic activity.This can be seen from the heatmaps and PCA map. The treatment with ONECUT1 activates genes : 3175, 10202, 388228, 338440, 284422 ONECUT1. This gene gene encodes a member of the ONECUT family of transcription factors, induced neuronal morphology and expression of neuronal genes. (Gene summary Entrez,https://www.proteinatlas.org/ENSG00000169856-ONECUT1). DHRS2. This gene encodes enzyme that activates hormones, such as steroid hormones, prostaglandins; reduces proliferation, migration and invasion of cancer cells. (Gene summary Entrez, https://www.proteinatlas.org/ENSG00000100867-DHRS2) SBK1. This gene enables protein serine/threonine kinase activity (Gene summary Entrez,https://www.proteinatlas.org/ENSG00000188322-SBK1) ANO9. The protein encoded by this gene is a member of the TMEM16 family of proteins, some of which form integral membrane calcium-activated chloride channels.(Gene summary Entrez,https://www.proteinatlas.org/ENSG00000185101-ANO9) SMIM24 This gene encodes the protein predicted to be located in membrane. Predicted to be integral component of membrane.(Gene summary Entrez,https://www.proteinatlas.org/ENSG00000095932-SMIM24) From the Go-terms enrichment analysis we can conclude that treatment with ONECUT suppresses gene activity associated with BCLXL: antiapoptotic genes, proliferation, cancer cell migration. "],["creating-r-packages.html", "Chapter 6 Creating R packages", " Chapter 6 Creating R packages Creating R packages Create your own package and publish it on Github To complete this portfolio assingment you need to perform the following steps: From your collection of RMarkdown files, collect 1 or a few that you know contain duplication of code (which should be fixed by writing a function). If there are already functions in your RMarkdown files, you can also select those Setup a new RStudio project with an R package (think about a cool name* - cannot included special character and spaces), linked to a github repo in your Github account Transfer the RMarkdown files that you selected in step 1 (and all their dependencies like data and scripts) to your new package (put them in the appropriate folders). Using what you have learnt so far (and what you can read from https://r-pkgs.org/index.html and https://emilyriederer.netlify.app/post/rmarkdown-driven-development/), transform your RMarkdown files into one R package. Publish the link to this package in your portfolio: *When choosing a name for a package, this quote from might help: “Side-note, if you are to create an R package, you need a name. It needs to be unique, especially if you plan on getting your package on CRAN. The {available} package can help you evaluate possible names to make sure they do not clash with other names and that they do not mean something rude.” We do not appreciate package names including offensive words Use this code to check the name you would like to use: library(available) available(“your_intended_package_name”) To pass this assignment, your new package should at least include: A properly formatted DESCRIPTION file, with all the fields including relevant information (so change the default values) 4 different functions that you wrote and with proper documentation, using roxygen2 comments A NAMESPACE file, generated with the command devtools::document() 1 Raw dataset that is documented and cleaned into a clean dataset. This clean dataset should be accessible inside your package. This means that if I install your package from Github, I would be able to call data(&lt;dataset_name&gt;, &lt;package_name&gt;) to load the cleaned dataset of interest in the Global Environment. One vignette that is accessible via the command browseVignettes(&lt;package_name&gt;) or vignette(&lt;package_name&gt;) The package installs from Github without errors when I run: devtools::install_github(&quot;account_name/package_name&quot;) link to package source code : Install package from github. View dataset library(&quot;devtools&quot;) ## Loading required package: usethis install_github(&quot;alenagrrr3/dscurve&quot;) ## Using GitHub PAT from the git credential store. ## Skipping install of &#39;dscurve&#39; from a github remote, the SHA1 (b0238546) has not changed since last install. ## Use `force = TRUE` to force installation library(dscurve) try(data(package = &quot;dscurve&quot;), silent = TRUE ) data(celegance) head(celegance) ## # A tibble: 6 × 34 ## plateRow plateColumn vialNr dropCode expType expReplicate expName ## &lt;lgl&gt; &lt;lgl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 NA NA 1 a experiment 3 CE.LIQ.FLOW.062 ## 2 NA NA 1 b experiment 3 CE.LIQ.FLOW.062 ## 3 NA NA 1 c experiment 3 CE.LIQ.FLOW.062 ## 4 NA NA 1 d experiment 3 CE.LIQ.FLOW.062 ## 5 NA NA 1 e experiment 3 CE.LIQ.FLOW.062 ## 6 NA NA 2 a experiment 3 CE.LIQ.FLOW.062 ## # ℹ 27 more variables: expDate &lt;dttm&gt;, expResearcher &lt;chr&gt;, expTime &lt;dbl&gt;, ## # expUnit &lt;chr&gt;, expVolumeCounted &lt;dbl&gt;, RawData &lt;dbl&gt;, compCASRN &lt;chr&gt;, ## # compName &lt;chr&gt;, compConcentration &lt;dbl&gt;, compUnit &lt;chr&gt;, ## # compDelivery &lt;chr&gt;, compVehicle &lt;chr&gt;, elegansStrain &lt;chr&gt;, ## # elegansInput &lt;dbl&gt;, bacterialStrain &lt;chr&gt;, bacterialTreatment &lt;chr&gt;, ## # bacterialOD600 &lt;dbl&gt;, bacterialConcX &lt;dbl&gt;, bacterialVolume &lt;dbl&gt;, ## # bacterialVolUnit &lt;chr&gt;, incubationVial &lt;chr&gt;, incubationVolume &lt;dbl&gt;, … df &lt;- data.frame(celegance) components &lt;-c(&quot;2,6-diisopropylnaphthalene&quot;,&quot;S-medium&quot;,&quot;naphthalene&quot;, &quot;decane&quot;) dscurve::dosisresponse(df,components) dscurve::basestats(df) ## [1] &quot;general summary :&quot; ## ## ## |compName | MeanResponse| MaxResponse| MinResonse| ## |:--------------------------|------------:|-----------:|----------:| ## |2,6-diisopropylnaphthalene | 65.01111| 120| 16| ## |Ethanol | 70.61667| 108| 30| ## |S-medium | 85.90000| 106| 62| ## |decane | 67.06667| 124| 10| ## |naphthalene | 64.42353| 107| 0| ## Warning: Removed 5 rows containing non-finite outside the ## scale range (`stat_density()`). Vignettes browseVignettes(&quot;dscurve&quot;) "],["genvisr.html", "Chapter 7 GenVisR 7.1 Introduction to dataset 7.2 Implementation genVizR", " Chapter 7 GenVisR 7.1 Introduction to dataset The scientists conducted a genome-wide association study and found mutations in specific regions of the genome that correlate with educational attainment. Found mutations are responsible for only two percent of the variation in the level of education and cognitive ability, but include “promising” for further research single-nucleotide polymorphisms (single-nucleotide polymorphisms, SNPs). Specifically, three independent mutations (rs9320913, rs11584700, rs4851266) are responsible for approximately 1 additional month of learning each.(Rietveld et al., 2013). Studies were performed on data from Utah residents with Northern and Western European ancestry ((Rietveld et al., 2013)). Daset comes form Supplementary Materials for GWAS of 126,559 Individuals Identifies Genetic Variants Associated with Educational Attainment https://www.science.org/doi/abs/10.1126/science.1235488 (Appendix) The normal functioning of each cell depends on thousands of proteins that need to be to be in the right place at the right time. Sometimes mutations in genes prevent one or one or more proteins from working properly. By making a change in a gene, the mutation thereby changes the instructions for synthesizing the protein so that the protein no longer functions properly or is not synthesized at all.The sequence of a gene in DNA can be altered in several ways. Mutations in genes have different effects on health and depend on which genes they occurred in and whether the function of these proteins is altered. This type of Missense mutation is caused by the replacement of one DNA base for another (e.g., replacing T for C, or G for A), resulting in the substitution of one amino acid for another in the protein encoded by the gene. Here is one example of missene mutation from the study by Flint and Munafò(Rietveld et al., 2013). The mutation caused by the substitution of nucleotide A for G results in the substitution of amino acid Aspartic acid for Glutamic acid.This in turn changes the properties of the protein. As Whole-Genom scientists have shown the mutation rs1056667 is associated with cognitive performance (Erikson et al., 2016) Gene BTN1A1 is located on chromosome 6(Gene, n.d.).Some studies have shown that this chromosome is important in the development of normal intelligence(Chromosome 6 Ring - Symptoms, Causes, Treatment | NORD, n.d.). knitr::include_graphics(&quot;genVizR/img/Human_BTN1A1.png&quot;) Figure 7.1: Figure 2. Gene map BTN1A1 7.2 Implementation genVizR Genomic Visualization and Interpretations Introduction to genVizR genVizR is a package to interpret and visualize data received from NGS sequencing.There are many tools available for the analysis and visualization of these data. In this module we will focus on 3 functions : waterfall, genCov, and cnSpec. For the last module another dataset is used. The dataset for the spectrum plot comes from the GDC data portal, https://portal.gdc.cancer.gov/analysis_page?app=Downloads, file with name MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_E09_667812.grch38.seg.v2.txt. Waterfall plots The waterfall() function from the genVizR package displays mutation in a heatmap-like structure with rows and columns denotating genes and samples.The function creates a plot of the mutational landscape from original data. (Waterfall, n.d.) First of all, we need to load the genVizR library from bioconductor. We also need to load the mutation data. In the original dataset, only the gene name, mutation and position are present. We need to add some additional information from the Ensemble database, such as chromosome coordinates and gene annotation and to join this information to dataset.Output of this function is a heatmap with number (%) of SNP mutations per genes. In this dataset we encure Missense, Silent, Deletion and 3’-UTR mutation Install required libraries if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;GenVisR&quot;) library(GenVisR) library(data.table) library (tidyverse) library(biomaRt) library(tidyverse) Data preproccesing. First we save all gene names from article to the list. list_gen_names &lt;- c(&quot;AFF3&quot;,&quot;BTN1A1&quot;, &quot;H2AC6&quot;, &quot;HMGN4&quot;, &quot;MDM4&quot;, &quot;LRRN2&quot;, &quot;TANK&quot; ) list_ensemble &lt;- c(&quot;ENSG00000144218&quot;, &quot;ENSG00000124557&quot;,&quot;ENSG00000180573&quot;, &quot;ENSG00000182952&quot;, &quot;ENSG00000198625&quot;,&quot;ENSG00000170382&quot;, &quot;ENSG00000136560&quot;) Then we need to retrieve genomic coordinates and annotations for the further analyses. This is possible with biomaRt Bioconductor library ensembl &lt;- useMart(&quot;ensembl&quot;) ensembl &lt;- useDataset(&quot;hsapiens_gene_ensembl&quot;,mart=ensembl) object_results2 &lt;- getBM(attributes=c(&#39;ensembl_gene_id&#39;,&#39;chromosome_name&#39;, &#39;start_position&#39;, &#39;end_position&#39;,&#39;gene_biotype&#39;,&#39;hgnc_symbol&#39;), filters=&#39;hgnc_symbol&#39;, values=list_gen_names, mart=ensembl) Export Ensemble results to csv file. biomart_export &lt;-read.csv(&quot;output/genViz/output_object_results_mart.csv&quot;) Join dataset export from biomart with list of genes/mutations. biomart_export &lt;- biomart_export[,-1] head( biomart_export) ## ensembl_gene_id chromosome_name start_position end_position gene_biotype ## 1 ENSG00000144218 2 99545419 100192428 protein_coding ## 2 ENSG00000292177 HSCHR6_1_CTG1 46483 56605 protein_coding ## 3 ENSG00000124557 6 26500303 26510425 protein_coding ## 4 ENSG00000180573 6 26124145 26139116 protein_coding ## 5 ENSG00000292175 HSCHR6_1_CTG1 84546 93113 protein_coding ## 6 ENSG00000182952 6 26538366 26546933 protein_coding ## hgnc_symbol ## 1 AFF3 ## 2 BTN1A1 ## 3 BTN1A1 ## 4 H2AC6 ## 5 HMGN4 ## 6 HMGN4 data_set_appendix&lt;-read.csv2(&quot;output/genViz/output_BTN1A2.csv&quot;) Make column names fit to join the ensemble dataset names(data_set_appendix)[names(data_set_appendix) == &#39;Hugo_Symbol&#39;] &lt;- &#39;hgnc_symbol&#39; names(data_set_appendix)[names(data_set_appendix) == &#39;X&#39;] &lt;- &#39;sample&#39; full_join &lt;- merge(data_set_appendix,biomart_export, by =&quot;hgnc_symbol&quot;) head(full_join) ## hgnc_symbol sample Variant_Classification Position ensembl_gene_id ## 1 AFF3 18 3UTR 99545644 ENSG00000144218 ## 2 AFF3 19 Missense_Mutation 99545817 ENSG00000144218 ## 3 AFF3 20 Missense_Mutation 99545812 ENSG00000144218 ## 4 AFF3 17 Missense_Mutation 99545531 ENSG00000144218 ## 5 BTN1A1 3 Missense_Mutation 26505362 ENSG00000292177 ## 6 BTN1A1 3 Missense_Mutation 26505362 ENSG00000124557 ## chromosome_name start_position end_position gene_biotype ## 1 2 99545419 100192428 protein_coding ## 2 2 99545419 100192428 protein_coding ## 3 2 99545419 100192428 protein_coding ## 4 2 99545419 100192428 protein_coding ## 5 HSCHR6_1_CTG1 46483 56605 protein_coding ## 6 6 26500303 26510425 protein_coding SNP mutation in the genome, such as single nucleotide variants, insertions, or deletions, play a significant role in the development of genetic diseases. Identifying and summarizing these variants is frequently the initial stage in forming hypotheses about how these events contribute to the development and advancement of diseases. The purpose of the waterfall function is to effectively consolidate small variant (SNVs/indels) data at a cohort level. It is usefull for gaining a comprehensive understanding of the types of variations seen in a group. Additionally, waterfall plots provide insight into the burden of mutations, genes that are frequently mutated, the mutual exclusivity or co-occurrence of genes, and the correlation between variants and clinical information. (Waterfall, n.d.) waterfall: function implementation on the chosen dataset myHierarchy &lt;- data.table(&quot;mutation&quot;=c(&quot;Missense_Mutation&quot;, &quot;Silent&quot;, &quot;3’UTR&quot;, &quot;DEL&quot;), color=c(&quot;#001ca4&quot;, &quot;#A8F5C2&quot;, &quot;#D69C4E&quot;, &quot;#F4CCD0&quot; ) ) colnames(full_join) ## [1] &quot;hgnc_symbol&quot; &quot;sample&quot; &quot;Variant_Classification&quot; ## [4] &quot;Position&quot; &quot;ensembl_gene_id&quot; &quot;chromosome_name&quot; ## [7] &quot;start_position&quot; &quot;end_position&quot; &quot;gene_biotype&quot; names(full_join)[names(full_join) == &#39;hgnc_symbol&#39;] &lt;- &#39;gene&#39; names(full_join)[names(full_join) == &#39;Variant_Classification&#39;] &lt;- &#39;mutation&#39; names(full_join)[names(full_join) == &#39;X&#39;] &lt;- &#39;sample&#39; full_join &lt;- full_join %&gt;% janitor :: clean_names() plotGenes=c(&quot;PIK3CA&quot;, &quot;TP53&quot;, &quot;USH2A&quot;, &quot;MLL3&quot;, &quot;BRCA1&quot;) plotData2 &lt;- Waterfall(full_join, mutationHierarchy = myHierarchy) drawPlot(plotData2) cnSpec Copy number spectrum plots generates sequencing data is the the determination of copy number gains and losses. The cnSpec() function, short for “copy number spectrum”, from the GenVisR package provides a view of copy number calls for a cohort of cases. Function cnSpec() requires parameters are a data frame with column names “chromosome”, “start”, “end”, “segmean”, “sample” and a reference assembly to the parameter genome.The data we will be working is gedownload from GDC database https://portal.gdc.cancer.gov/analysis_page?app=Downloads The output of this program consists of a file containing segmented copy number calls. The function gives a visualization of the sequencing dataset by sample by chromosome. Chromosomes are indicated in columns, samples in rows. Red color means too many copies of this gene, which means that these genes are carcinogenic. library(GenVisR) library(tidyverse) file_ngs_part1 &lt;- &quot;data_raw/genViz/MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_E09_667812.grch38.seg.v1.txt&quot; file_ngs_part2 &lt;- &quot;data_raw/genViz/MATZO_p_TCGAb40_SNP_1N_GenomeWideSNP_6_E09_667812.grch38.seg.v2.txt&quot; ngs_v1 &lt;- readr::read_delim(file_ngs_part1, delim = &quot;\\t&quot;) ngs_v2 &lt;- readr::read_delim(file_ngs_part2, delim = &quot;\\t&quot;) ngsv1.2 &lt;- rbind(ngs_v1,ngs_v2) head(ngsv1.2) ## # A tibble: 6 × 6 ## GDC_Aliquot Chromosome Start End Num_Probes Segment_Mean ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3573fb47-be73-4d7c-a9c9-b0ba… 1 6.29e4 9.86e4 13 0.632 ## 2 3573fb47-be73-4d7c-a9c9-b0ba… 1 2.59e5 7.93e5 13 0.152 ## 3 3573fb47-be73-4d7c-a9c9-b0ba… 1 8.05e5 3.30e6 714 0.338 ## 4 3573fb47-be73-4d7c-a9c9-b0ba… 1 3.30e6 5.05e6 1321 0.0421 ## 5 3573fb47-be73-4d7c-a9c9-b0ba… 1 5.05e6 5.07e6 12 0.664 ## 6 3573fb47-be73-4d7c-a9c9-b0ba… 1 5.08e6 5.19e6 87 0.0681 colnames(ngsv1.2) &lt;- c(&quot;sample&quot;, &quot;chromosome&quot;, &quot;start&quot;, &quot;end&quot;, &quot;probes&quot;, &quot;segmean&quot;) ngsv1.2 &lt;- mutate(ngsv1.2, sample=str_sub(sample, start=32, end=36)) genomeBoundaries &lt;- aggregate(chromEnd ~ chrom, data=cytoGeno[cytoGeno$genome==&quot;hg38&quot;,], max) genomeBoundaries$chromStart &lt;- 0 colnames(genomeBoundaries) &lt;- c(&quot;chromosome&quot;, &quot;end&quot;, &quot;start&quot;) cnSpec(ngsv1.2, genome=&quot;hg38&quot;, CN_Loss_colour = &quot;#add8e6&quot;, CN_Gain_colour = &quot;#A30000&quot;, CNscale=&quot;relative&quot;, y=genomeBoundaries ) Gen cov Gencov is the function to view coverage of a specific region of the genome in the context of specific samples. This dataset contains coordinates of 2 gens, BTN1A1, BTN2A1 on the chromosome 6 and number their transcripts per coordinate.In this particular plot we can see, that BTN1A1 is more covered than BTN2A1. And we can see the region with hight and low GC content, the GC-content is higher in exons than in introns. The second segment of the plot with hight CG- content is exon. For this function we need BSgenome object. The BSgenome class is a container for storing the full genome sequences of a given organism. The coverage data for our experiment corresponds to the hg19 reference assembly. Libraries BSgenome.Hsapiens.UCSC.hg19 and TxDb.Hsapiens.UCSC.hg19.knownGene ares loaded. library(TxDb.Hsapiens.UCSC.hg19.knownGene) txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene library(BSgenome.Hsapiens.UCSC.hg19) genome &lt;- BSgenome.Hsapiens.UCSC.hg19 library(BSgenome.Hsapiens.UCSC.hg19) library(TxDb.Hsapiens.UCSC.hg19.knownGene) url &lt;- &quot;data_raw/genViz/BTN1A1_cov_chr6.V1.txt&quot; covData &lt;- read.csv(url, sep=&quot;\\t&quot;, header=T) colnames(covData) &lt;- c(&quot;chromosome&quot;, &quot;start&quot;, &quot;end&quot;, &quot;BTN1A1&quot;, &quot;BTN2A1&quot;) # create a function to split the data frame into lists of data frames samples &lt;- c(&quot;BTN1A1&quot;, &quot;BTN2A1&quot;) a &lt;- function(x, y){ col_names &lt;- c(&quot;chromosome&quot;, &quot;end&quot;, x) y &lt;- y[,col_names] colnames(y) &lt;- c(&quot;chromosome&quot;, &quot;end&quot;, &quot;cov&quot;) return(y) } covData &lt;- lapply(samples, a, covData) names(covData) &lt;- samples genomeObject &lt;-BSgenome.Hsapiens.UCSC.hg19 TxDbObject &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene chromosome &lt;- as.character(unique(covData[[1]]$chromosome)) start &lt;- as.numeric(min(covData[[1]]$end)) end &lt;- as.numeric(max(covData[[1]]$end)) grObject &lt;- GRanges(seqnames=c(&quot;chr6&quot;), ranges=IRanges(start=start, end=end)) genCov(x=covData, txdb=TxDbObject, gr=grObject, genome=genomeObject, cov_plotType=&quot;line&quot;, label_txtSize = 5) ## NULL Bibliography Applications for Nanopore sequencing. (n.d.). Oxford Nanopore Technologies. Retrieved November 14, 2024, from https://nanoporetech.com/applications Augustus. (n.d.). Bioinformatics Notebook. Retrieved November 25, 2024, from https://rnnh.github.io/bioinfo-notebook/docs/augustus.html Augustus/docs/RUNNING-AUGUSTUS.md at master · Gaius-Augustus/Augustus. (n.d.). GitHub. Retrieved November 25, 2024, from https://github.com/Gaius-Augustus/Augustus/blob/master/docs/RUNNING-AUGUSTUS.md Baum, D. J. (n.d.). Ever thought about Earthworms? African Wildlife Economy Institute. Retrieved November 25, 2024, from https://www0.sun.ac.za/awei/articles/ever-thought-about-earthworms Bioinformatics and other bits - Creating a local RefSeq protein blast database. (n.d.-a). Retrieved November 28, 2024, from https://dmnfarrell.github.io/bioinformatics/local-refseq-db Bioinformatics and other bits - Creating a local RefSeq protein blast database. (n.d.-b). Retrieved November 28, 2024, from https://dmnfarrell.github.io/bioinformatics/local-refseq-db Blaxter, M. L., Spurgeon, D., &amp; Kille, P. (2023). The genome sequence of the common earthworm, Lumbricus terrestris (Linnaeus, 1758). Wellcome Open Research, 8, 500. https://doi.org/10.12688/wellcomeopenres.20178.1 Brůna, T., Hoff, K. J., Lomsadze, A., Stanke, M., &amp; Borodovsky, M. (2021). BRAKER2: Automatic eukaryotic genome annotation with GeneMark-EP+ and AUGUSTUS supported by a protein database. NAR Genomics and Bioinformatics, 3(1), lqaa108. https://doi.org/10.1093/nargab/lqaa108 Buchfink, B., Xie, C., &amp; Huson, D. H. (2015). Fast and sensitive protein alignment using DIAMOND. Nature Methods, 12(1), 59–60. https://doi.org/10.1038/nmeth.3176 Calus, S. T., Ijaz, U. Z., &amp; Pinto, A. (2018). NanoAmpli-Seq - Sample processing and sequencing library preparation workflow. https://www.protocols.io/view/nanoampli-seq-sample-processing-and-sequencing-lib-u26eyhe Chen, Y., Davidson, N. M., Wan, Y. K., Patel, H., Yao, F., Low, H. M., Hendra, C., Watten, L., Sim, A., Sawyer, C., Iakovleva, V., Lee, P. L., Xin, L., Ng, H. E. V., Loo, J. M., Ong, X., Ng, H. Q. A., Wang, J., Koh, W. Q. C., … Consortium, S.-N. (2021, April 22). A systematic benchmark of Nanopore long read RNA sequencing for transcript level analysis in human cell lines. https://doi.org/10.1101/2021.04.21.440736 Chen, Y., Wang, Y., Chen, W., Tan, Z., Song, Y., Human Genome Structural Variation Consortium, Chen, H., &amp; Chong, Z. (2023). Gene Fusion Detection and Characterization in Long-Read Cancer Transcriptome Sequencing Data with FusionSeeker. Cancer Research, 83(1), 28–33. https://doi.org/10.1158/0008-5472.CAN-22-1628 Chromosome 6 Ring - Symptoms, Causes, Treatment | NORD. (n.d.). Retrieved November 16, 2024, from https://rarediseases.org/rare-diseases/chromosome-6-ring/ colauttilab.github.io/. (n.d.). De Novo Assembly Tutorial. Retrieved November 30, 2024, from https://colauttilab.github.io/NGS/deNovoTutorial.html ColauttilLab. (n.d.). De Novo Assembly Tutorial. Retrieved November 30, 2024, from https://colauttilab.github.io/NGS/deNovoTutorial.html ebi.ac.uk. (n.d.). ENA Browser. Retrieved November 25, 2024, from https://www.ebi.ac.uk/ena/browser/view/PRJEB59400 Erikson, G. A., Bodian, D. L., Rueda, M., Molparia, B., Scott, E. R., Scott-Van Zeeland, A. A., Topol, S. E., Wineinger, N. E., Niederhuber, J. E., Topol, E. J., &amp; Torkamani, A. (2016). Whole-Genome Sequencing of a Healthy Aging Cohort. Cell, 165(4), 1002–1011. https://doi.org/10.1016/j.cell.2016.03.022 Erxleben, A., &amp; Grüning, B. (12:19:56 +000012:19:56 +0000). Genome Annotation [Text]. Galaxy Training Network; Galaxy Training Network. https://translated.turbopages.org/proxy_u/en-ru.ru.dd5ab9ec-67446c58-5ab2c0cb-74722d776562/https/training.galaxyproject.org/training-material/topics/genome-annotation/tutorials/genome-annotation/tutorial.html Gene Cluster Visualizations in R. (n.d.). Retrieved November 27, 2024, from https://nvelden.github.io/geneviewer/ Gene: BTN1A1 (ENSG00000124557) - Summary - Homo_sapiens - Ensembl genome browser 113. (n.d.). Retrieved November 16, 2024, from https://www.ensembl.org/Homo_sapiens/Gene/Summary?g=ENSG00000124557;r=6:26500303-26510425 Genome Annotation / Tutorial List. (13:32:22 +000013:32:22 +0000). [Text]. Galaxy Training Network; Galaxy Training Network. https://training.galaxyproject.org/training-material/topics/genome-annotation/ GWAS of 126,559 Individuals Identifies Genetic Variants Associated with Educational Attainment | Science. (n.d.). Retrieved November 16, 2024, from https://www.science.org/doi/abs/10.1126/science.1235488 Help - Homo_sapiens - Ensembl genome browser 113. (n.d.). Retrieved November 13, 2024, from https://www.ensembl.org/Help/View?id=280 Home · TransDecoder/TransDecoder Wiki. (n.d.). Retrieved November 28, 2024, from https://github.com/TransDecoder/TransDecoder/wiki https://www.cell.com/cell/pdf/S0092-8674(16)30278-1.pdf. (n.d.). Retrieved November 16, 2024, from https://www.cell.com/cell/pdf/S0092-8674(16)30278-1.pdf Index of /genomes. (n.d.). Retrieved November 28, 2024, from https://ftp.ncbi.nlm.nih.gov/genomes/ Index of /genomes/MapView. (n.d.). Retrieved November 28, 2024, from https://ftp.ncbi.nlm.nih.gov/genomes/MapView/ JBrowse | JBrowse. (n.d.). Retrieved November 26, 2024, from https://jbrowse.org/jb2/ LabX. (n.d.). Accelerating Cancer Research Through Comprehensive Genomic Analysis. Retrieved November 15, 2024, from https://go.technologynetworks.com/accelerating-cancer-research Leung, M. C. K., Williams, P. L., Benedetto, A., Au, C., Helmcke, K. J., Aschner, M., &amp; Meyer, J. N. (2008). Caenorhabditis elegans: An Emerging Model in Biomedical and Environmental Toxicology. Toxicological Sciences, 106(1), 5–28. https://doi.org/10.1093/toxsci/kfn121 Lu, H., Giordano, F., &amp; Ning, Z. (2016). Oxford Nanopore MinION Sequencing and Genome Assembly. Genomics, Proteomics &amp; Bioinformatics, 14(5), 265–279. https://doi.org/10.1016/j.gpb.2016.05.004 LumbriBASE. (n.d.). Retrieved November 30, 2024, from http://xyala2.bio.ed.ac.uk/Lumbribase/lumbribase_php/lumbribase.shtml ncbi.nlm.nih.gov. (n.d.). The NCBI Eukaryotic Genome Annotation Pipeline. Retrieved November 25, 2024, from https://www.ncbi.nlm.nih.gov/refseq/annotation_euk/process/ Norris, A. L., Workman, R. E., Fan, Y., Eshleman, J. R., &amp; Timp, W. (2016). Nanopore sequencing detects structural variants in cancer. Cancer Biology &amp; Therapy, 17(3), 246–253. https://doi.org/10.1080/15384047.2016.1139236 Pilato, G. (n.d.). The significance of musculature in the origin of the Annelida. Retrieved November 30, 2024, from http://ouci.dntb.gov.ua/en/works/ldperODl/ PubChem. (n.d.). BTN1A1 - butyrophilin subfamily 1 member A1 (human). Retrieved November 16, 2024, from https://pubchem.ncbi.nlm.nih.gov/gene/BTN1A1/human Rietveld, C. A., Medland, S. E., Derringer, J., Yang, J., Esko, T., Martin, N. W., Westra, H.-J., Shakhbazov, K., Abdellaoui, A., Agrawal, A., Albrecht, E., Alizadeh, B. Z., Amin, N., Barnard, J., Baumeister, S. E., Benke, K. S., Bielak, L. F., Boatman, J. A., Boyle, P. A., … Koellinger, P. D. (2013). GWAS of 126,559 Individuals Identifies Genetic Variants Associated with Educational Attainment. Science, 340(6139), 1467–1471. https://doi.org/10.1126/science.1235488 Short, S., Green Etxabe, A., Robinson, A., Spurgeon, D., &amp; Kille, P. (2023a). The genome sequence of the red compost earthworm, Lumbricus rubellus (Hoffmeister, 1843). Wellcome Open Research, 8, 354. https://doi.org/10.12688/wellcomeopenres.19834.1 Short, S., Green Etxabe, A., Robinson, A., Spurgeon, D., &amp; Kille, P. (2023b). The genome sequence of the red compost earthworm, Lumbricus rubellus (Hoffmeister, 1843). Wellcome Open Research, 8, 354. https://doi.org/10.12688/wellcomeopenres.19834.1 Stanke, M. (2005, February 4). Augustus Online [Service]. Institute for Mathematics and Computer Science, University of Greifswald. https://bioinf.uni-greifswald.de/augustus/submission.php Tierney, N. (n.d.). 9 Figures, Tables, Captions. | RMarkdown for Scientists. Retrieved November 16, 2024, from https://rmd4sci.njtierney.com/ Waterfall: Function introduction. (n.d.). Retrieved November 16, 2024, from https://www.bioconductor.org/packages/devel/bioc/vignettes/GenVisR/inst/doc/waterfall_introduction.html Xiao, T., &amp; Zhou, W. (2020). The third generation sequencing: The advanced approach to genetic diseases. Translational Pediatrics, 9(2), 163. https://doi.org/10.21037/tp.2020.03.06 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
